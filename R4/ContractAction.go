// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// ContractAction Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractAction struct {

  // Encounter or Episode with primary association to specified term activity.
  Context *Reference `json:"context,omitempty"`

  // Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
  ContextLinkId []string `json:"contextLinkId,omitempty"`

  // True if the term prohibits the  action.
  DoNotPerform bool `json:"doNotPerform,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // Reason or purpose for the action stipulated by this Contract Provision.
  Intent *CodeableConcept `json:"intent"`

  // Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.
  LinkId []string `json:"linkId,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Comments made about the term action made by the requester, performer, subject or other participants.
  Note []*Annotation `json:"note,omitempty"`

  // When action happens.
  OccurrenceDateTime string `json:"occurrenceDateTime,omitempty"`

  // When action happens.
  OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`

  // When action happens.
  OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`

  // Indicates who or what is being asked to perform (or not perform) the ction.
  Performer *Reference `json:"performer,omitempty"`

  // Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
  PerformerLinkId []string `json:"performerLinkId,omitempty"`

  // The type of role or competency of an individual desired or required to perform or not perform the action.
  PerformerRole *CodeableConcept `json:"performerRole,omitempty"`

  // The type of individual that is desired or required to perform or not perform the action.
  PerformerType []*CodeableConcept `json:"performerType,omitempty"`

  // Describes why the action is to be performed or not performed in textual form.
  Reason []string `json:"reason,omitempty"`

  // Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited.
  ReasonCode []*CodeableConcept `json:"reasonCode,omitempty"`

  // Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.
  ReasonLinkId []string `json:"reasonLinkId,omitempty"`

  // Indicates another resource whose existence justifies permitting or not permitting this action.
  ReasonReference []*Reference `json:"reasonReference,omitempty"`

  // Who or what initiated the action and has responsibility for its activation.
  Requester []*Reference `json:"requester,omitempty"`

  // Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.
  RequesterLinkId []string `json:"requesterLinkId,omitempty"`

  // Security labels that protects the action.
  SecurityLabelNumber []float64 `json:"securityLabelNumber,omitempty"`

  // Current state of the term action.
  Status *CodeableConcept `json:"status"`

  // Entity of the action.
  Subject []*ContractSubject `json:"subject,omitempty"`

  // Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.
  Type *CodeableConcept `json:"type"`
}

func (strct *ContractAction) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "context" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"context\": ")
	if tmp, err := json.Marshal(strct.Context); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contextLinkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contextLinkId\": ")
	if tmp, err := json.Marshal(strct.ContextLinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doNotPerform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doNotPerform\": ")
	if tmp, err := json.Marshal(strct.DoNotPerform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Intent" field is required
    if strct.Intent == nil {
        return nil, errors.New("intent is a required field")
    }
    // Marshal the "intent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"intent\": ")
	if tmp, err := json.Marshal(strct.Intent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "linkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"linkId\": ")
	if tmp, err := json.Marshal(strct.LinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceDateTime\": ")
	if tmp, err := json.Marshal(strct.OccurrenceDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrencePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrencePeriod\": ")
	if tmp, err := json.Marshal(strct.OccurrencePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceTiming\": ")
	if tmp, err := json.Marshal(strct.OccurrenceTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performer\": ")
	if tmp, err := json.Marshal(strct.Performer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performerLinkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performerLinkId\": ")
	if tmp, err := json.Marshal(strct.PerformerLinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performerRole" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performerRole\": ")
	if tmp, err := json.Marshal(strct.PerformerRole); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performerType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performerType\": ")
	if tmp, err := json.Marshal(strct.PerformerType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reason\": ")
	if tmp, err := json.Marshal(strct.Reason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonCode\": ")
	if tmp, err := json.Marshal(strct.ReasonCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonLinkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonLinkId\": ")
	if tmp, err := json.Marshal(strct.ReasonLinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonReference\": ")
	if tmp, err := json.Marshal(strct.ReasonReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requester" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requester\": ")
	if tmp, err := json.Marshal(strct.Requester); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requesterLinkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requesterLinkId\": ")
	if tmp, err := json.Marshal(strct.RequesterLinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "securityLabelNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"securityLabelNumber\": ")
	if tmp, err := json.Marshal(strct.SecurityLabelNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Status" field is required
    if strct.Status == nil {
        return nil, errors.New("status is a required field")
    }
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subject" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subject\": ")
	if tmp, err := json.Marshal(strct.Subject); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    if strct.Type == nil {
        return nil, errors.New("type is a required field")
    }
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ContractAction) UnmarshalJSON(b []byte) error {
    intentReceived := false
    statusReceived := false
    typeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "context":
            if err := json.Unmarshal([]byte(v), &strct.Context); err != nil {
                return err
             }
        case "contextLinkId":
            if err := json.Unmarshal([]byte(v), &strct.ContextLinkId); err != nil {
                return err
             }
        case "doNotPerform":
            if err := json.Unmarshal([]byte(v), &strct.DoNotPerform); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "intent":
            if err := json.Unmarshal([]byte(v), &strct.Intent); err != nil {
                return err
             }
            intentReceived = true
        case "linkId":
            if err := json.Unmarshal([]byte(v), &strct.LinkId); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "occurrenceDateTime":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceDateTime); err != nil {
                return err
             }
        case "occurrencePeriod":
            if err := json.Unmarshal([]byte(v), &strct.OccurrencePeriod); err != nil {
                return err
             }
        case "occurrenceTiming":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceTiming); err != nil {
                return err
             }
        case "performer":
            if err := json.Unmarshal([]byte(v), &strct.Performer); err != nil {
                return err
             }
        case "performerLinkId":
            if err := json.Unmarshal([]byte(v), &strct.PerformerLinkId); err != nil {
                return err
             }
        case "performerRole":
            if err := json.Unmarshal([]byte(v), &strct.PerformerRole); err != nil {
                return err
             }
        case "performerType":
            if err := json.Unmarshal([]byte(v), &strct.PerformerType); err != nil {
                return err
             }
        case "reason":
            if err := json.Unmarshal([]byte(v), &strct.Reason); err != nil {
                return err
             }
        case "reasonCode":
            if err := json.Unmarshal([]byte(v), &strct.ReasonCode); err != nil {
                return err
             }
        case "reasonLinkId":
            if err := json.Unmarshal([]byte(v), &strct.ReasonLinkId); err != nil {
                return err
             }
        case "reasonReference":
            if err := json.Unmarshal([]byte(v), &strct.ReasonReference); err != nil {
                return err
             }
        case "requester":
            if err := json.Unmarshal([]byte(v), &strct.Requester); err != nil {
                return err
             }
        case "requesterLinkId":
            if err := json.Unmarshal([]byte(v), &strct.RequesterLinkId); err != nil {
                return err
             }
        case "securityLabelNumber":
            if err := json.Unmarshal([]byte(v), &strct.SecurityLabelNumber); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
            statusReceived = true
        case "subject":
            if err := json.Unmarshal([]byte(v), &strct.Subject); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if intent (a required property) was received
    if !intentReceived {
        return errors.New("\"intent\" is required but was not present")
    }
    // check if status (a required property) was received
    if !statusReceived {
        return errors.New("\"status\" is required but was not present")
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    return nil
}
