// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// VerificationResult Describes validation requirements, source(s), status and dates for one or more elements.
type VerificationResult struct {

  // Information about the entity attesting to information.
  Attestation *VerificationResultAttestation `json:"attestation,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The result if validation fails (fatal; warning; record only; none).
  FailureAction *CodeableConcept `json:"failureAction,omitempty"`

  // Frequency of revalidation.
  Frequency *Timing `json:"frequency,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The date/time validation was last completed (including failed validations).
  LastPerformed string `json:"lastPerformed,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The frequency with which the target must be validated (none; initial; periodic).
  Need *CodeableConcept `json:"need,omitempty"`

  // The date when target is next validated, if appropriate.
  NextScheduled string `json:"nextScheduled,omitempty"`

  // Information about the primary source(s) involved in validation.
  PrimarySource []*VerificationResultPrimarySource `json:"primarySource,omitempty"`

  // This is a VerificationResult resource
  ResourceType interface{} `json:"resourceType"`

  // The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).
  Status string `json:"status,omitempty"`

  // When the validation status was updated.
  StatusDate string `json:"statusDate,omitempty"`

  // A resource that was validated.
  Target []*Reference `json:"target,omitempty"`

  // The fhirpath location(s) within the resource that was validated.
  TargetLocation []string `json:"targetLocation,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).
  ValidationProcess []*CodeableConcept `json:"validationProcess,omitempty"`

  // What the target is validated against (nothing; primary source; multiple sources).
  ValidationType *CodeableConcept `json:"validationType,omitempty"`

  // Information about the entity validating information.
  Validator []*VerificationResultValidator `json:"validator,omitempty"`
}

func (strct *VerificationResult) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "attestation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"attestation\": ")
	if tmp, err := json.Marshal(strct.Attestation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "failureAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"failureAction\": ")
	if tmp, err := json.Marshal(strct.FailureAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "frequency" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"frequency\": ")
	if tmp, err := json.Marshal(strct.Frequency); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lastPerformed" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lastPerformed\": ")
	if tmp, err := json.Marshal(strct.LastPerformed); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "need" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"need\": ")
	if tmp, err := json.Marshal(strct.Need); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "nextScheduled" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"nextScheduled\": ")
	if tmp, err := json.Marshal(strct.NextScheduled); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "primarySource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"primarySource\": ")
	if tmp, err := json.Marshal(strct.PrimarySource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "statusDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statusDate\": ")
	if tmp, err := json.Marshal(strct.StatusDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "target" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"target\": ")
	if tmp, err := json.Marshal(strct.Target); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "targetLocation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"targetLocation\": ")
	if tmp, err := json.Marshal(strct.TargetLocation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validationProcess" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validationProcess\": ")
	if tmp, err := json.Marshal(strct.ValidationProcess); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validationType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validationType\": ")
	if tmp, err := json.Marshal(strct.ValidationType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validator\": ")
	if tmp, err := json.Marshal(strct.Validator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VerificationResult) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "attestation":
            if err := json.Unmarshal([]byte(v), &strct.Attestation); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "failureAction":
            if err := json.Unmarshal([]byte(v), &strct.FailureAction); err != nil {
                return err
             }
        case "frequency":
            if err := json.Unmarshal([]byte(v), &strct.Frequency); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "lastPerformed":
            if err := json.Unmarshal([]byte(v), &strct.LastPerformed); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "need":
            if err := json.Unmarshal([]byte(v), &strct.Need); err != nil {
                return err
             }
        case "nextScheduled":
            if err := json.Unmarshal([]byte(v), &strct.NextScheduled); err != nil {
                return err
             }
        case "primarySource":
            if err := json.Unmarshal([]byte(v), &strct.PrimarySource); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "statusDate":
            if err := json.Unmarshal([]byte(v), &strct.StatusDate); err != nil {
                return err
             }
        case "target":
            if err := json.Unmarshal([]byte(v), &strct.Target); err != nil {
                return err
             }
        case "targetLocation":
            if err := json.Unmarshal([]byte(v), &strct.TargetLocation); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "validationProcess":
            if err := json.Unmarshal([]byte(v), &strct.ValidationProcess); err != nil {
                return err
             }
        case "validationType":
            if err := json.Unmarshal([]byte(v), &strct.ValidationType); err != nil {
                return err
             }
        case "validator":
            if err := json.Unmarshal([]byte(v), &strct.Validator); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
