// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// ObservationDefinition Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
type ObservationDefinition struct {

  // The set of abnormal coded results for the observation conforming to this ObservationDefinition.
  AbnormalCodedValueSet *Reference `json:"abnormalCodedValueSet,omitempty"`

  // A code that classifies the general type of observation.
  Category []*CodeableConcept `json:"category,omitempty"`

  // Describes what will be observed. Sometimes this is called the observation "name".
  Code *CodeableConcept `json:"code"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The set of critical coded results for the observation conforming to this ObservationDefinition.
  CriticalCodedValueSet *Reference `json:"criticalCodedValueSet,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A unique identifier assigned to this ObservationDefinition artifact.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // The method or technique used to perform the observation.
  Method *CodeableConcept `json:"method,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Multiple results allowed for observations conforming to this ObservationDefinition.
  MultipleResultsAllowed bool `json:"multipleResultsAllowed,omitempty"`

  // The set of normal coded results for the observations conforming to this ObservationDefinition.
  NormalCodedValueSet *Reference `json:"normalCodedValueSet,omitempty"`

  // The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.
  PermittedDataType []interface{} `json:"permittedDataType,omitempty"`

  // The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.
  PreferredReportName string `json:"preferredReportName,omitempty"`

  // Multiple  ranges of results qualified by different contexts for ordinal or continuous observations conforming to this ObservationDefinition.
  QualifiedInterval []*ObservationDefinitionQualifiedInterval `json:"qualifiedInterval,omitempty"`

  // Characteristics for quantitative results of this observation.
  QuantitativeDetails *ObservationDefinitionQuantitativeDetails `json:"quantitativeDetails,omitempty"`

  // This is a ObservationDefinition resource
  ResourceType interface{} `json:"resourceType"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The set of valid coded results for the observations  conforming to this ObservationDefinition.
  ValidCodedValueSet *Reference `json:"validCodedValueSet,omitempty"`
}

func (strct *ObservationDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "abnormalCodedValueSet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"abnormalCodedValueSet\": ")
	if tmp, err := json.Marshal(strct.AbnormalCodedValueSet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "category" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"category\": ")
	if tmp, err := json.Marshal(strct.Category); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Code" field is required
    if strct.Code == nil {
        return nil, errors.New("code is a required field")
    }
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "criticalCodedValueSet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"criticalCodedValueSet\": ")
	if tmp, err := json.Marshal(strct.CriticalCodedValueSet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "method" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"method\": ")
	if tmp, err := json.Marshal(strct.Method); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "multipleResultsAllowed" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"multipleResultsAllowed\": ")
	if tmp, err := json.Marshal(strct.MultipleResultsAllowed); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "normalCodedValueSet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"normalCodedValueSet\": ")
	if tmp, err := json.Marshal(strct.NormalCodedValueSet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "permittedDataType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"permittedDataType\": ")
	if tmp, err := json.Marshal(strct.PermittedDataType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "preferredReportName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"preferredReportName\": ")
	if tmp, err := json.Marshal(strct.PreferredReportName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "qualifiedInterval" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"qualifiedInterval\": ")
	if tmp, err := json.Marshal(strct.QualifiedInterval); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quantitativeDetails" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quantitativeDetails\": ")
	if tmp, err := json.Marshal(strct.QuantitativeDetails); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validCodedValueSet" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validCodedValueSet\": ")
	if tmp, err := json.Marshal(strct.ValidCodedValueSet); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ObservationDefinition) UnmarshalJSON(b []byte) error {
    codeReceived := false
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "abnormalCodedValueSet":
            if err := json.Unmarshal([]byte(v), &strct.AbnormalCodedValueSet); err != nil {
                return err
             }
        case "category":
            if err := json.Unmarshal([]byte(v), &strct.Category); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
            codeReceived = true
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "criticalCodedValueSet":
            if err := json.Unmarshal([]byte(v), &strct.CriticalCodedValueSet); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "method":
            if err := json.Unmarshal([]byte(v), &strct.Method); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "multipleResultsAllowed":
            if err := json.Unmarshal([]byte(v), &strct.MultipleResultsAllowed); err != nil {
                return err
             }
        case "normalCodedValueSet":
            if err := json.Unmarshal([]byte(v), &strct.NormalCodedValueSet); err != nil {
                return err
             }
        case "permittedDataType":
            if err := json.Unmarshal([]byte(v), &strct.PermittedDataType); err != nil {
                return err
             }
        case "preferredReportName":
            if err := json.Unmarshal([]byte(v), &strct.PreferredReportName); err != nil {
                return err
             }
        case "qualifiedInterval":
            if err := json.Unmarshal([]byte(v), &strct.QualifiedInterval); err != nil {
                return err
             }
        case "quantitativeDetails":
            if err := json.Unmarshal([]byte(v), &strct.QuantitativeDetails); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "validCodedValueSet":
            if err := json.Unmarshal([]byte(v), &strct.ValidCodedValueSet); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if code (a required property) was received
    if !codeReceived {
        return errors.New("\"code\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
