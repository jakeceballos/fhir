// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// MedicinalProduct Detailed definition of a medicinal product, typically for uses other than direct patient care (e.g. regulatory use).
type MedicinalProduct struct {

  // Whether the Medicinal Product is subject to additional monitoring for regulatory reasons.
  AdditionalMonitoringIndicator *CodeableConcept `json:"additionalMonitoringIndicator,omitempty"`

  // Supporting documentation, typically for regulatory submission.
  AttachedDocument []*Reference `json:"attachedDocument,omitempty"`

  // Clinical trials or studies that this product is involved in.
  ClinicalTrial []*Reference `json:"clinicalTrial,omitempty"`

  // The dose form for a single part product, or combined form of a multiple part product.
  CombinedPharmaceuticalDoseForm *CodeableConcept `json:"combinedPharmaceuticalDoseForm,omitempty"`

  // A product specific contact, person (in a role), or an organization.
  Contact []*Reference `json:"contact,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // Reference to another product, e.g. for linking authorised to investigational product.
  CrossReference []*Identifier `json:"crossReference,omitempty"`

  // If this medicine applies to human or veterinary uses.
  Domain *Coding `json:"domain,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Business identifier for this product. Could be an MPID.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The legal status of supply of the medicinal product as classified by the regulator.
  LegalStatusOfSupply *CodeableConcept `json:"legalStatusOfSupply,omitempty"`

  // An operation applied to the product, for manufacturing or adminsitrative purpose.
  ManufacturingBusinessOperation []*MedicinalProductManufacturingBusinessOperation `json:"manufacturingBusinessOperation,omitempty"`

  // Marketing status of the medicinal product, in contrast to marketing authorizaton.
  MarketingStatus []*MarketingStatus `json:"marketingStatus,omitempty"`

  // A master file for to the medicinal product (e.g. Pharmacovigilance System Master File).
  MasterFile []*Reference `json:"masterFile,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The product's name, including full name and possibly coded parts.
  Name []*MedicinalProductName `json:"name"`

  // Package representation for the product.
  PackagedMedicinalProduct []*Reference `json:"packagedMedicinalProduct,omitempty"`

  // If authorised for use in children.
  PaediatricUseIndicator *CodeableConcept `json:"paediatricUseIndicator,omitempty"`

  // Pharmaceutical aspects of product.
  PharmaceuticalProduct []*Reference `json:"pharmaceuticalProduct,omitempty"`

  // Allows the product to be classified by various systems.
  ProductClassification []*CodeableConcept `json:"productClassification,omitempty"`

  // This is a MedicinalProduct resource
  ResourceType interface{} `json:"resourceType"`

  // Indicates if the medicinal product has an orphan designation for the treatment of a rare disease.
  SpecialDesignation []*MedicinalProductSpecialDesignation `json:"specialDesignation,omitempty"`

  // Whether the Medicinal Product is subject to special measures for regulatory reasons.
  SpecialMeasures []string `json:"specialMeasures,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // Regulatory type, e.g. Investigational or Authorized.
  Type *CodeableConcept `json:"type,omitempty"`
}

func (strct *MedicinalProduct) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "additionalMonitoringIndicator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"additionalMonitoringIndicator\": ")
	if tmp, err := json.Marshal(strct.AdditionalMonitoringIndicator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "attachedDocument" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"attachedDocument\": ")
	if tmp, err := json.Marshal(strct.AttachedDocument); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clinicalTrial" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clinicalTrial\": ")
	if tmp, err := json.Marshal(strct.ClinicalTrial); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "combinedPharmaceuticalDoseForm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"combinedPharmaceuticalDoseForm\": ")
	if tmp, err := json.Marshal(strct.CombinedPharmaceuticalDoseForm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contact\": ")
	if tmp, err := json.Marshal(strct.Contact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "crossReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"crossReference\": ")
	if tmp, err := json.Marshal(strct.CrossReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "domain" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"domain\": ")
	if tmp, err := json.Marshal(strct.Domain); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "legalStatusOfSupply" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"legalStatusOfSupply\": ")
	if tmp, err := json.Marshal(strct.LegalStatusOfSupply); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "manufacturingBusinessOperation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"manufacturingBusinessOperation\": ")
	if tmp, err := json.Marshal(strct.ManufacturingBusinessOperation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "marketingStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"marketingStatus\": ")
	if tmp, err := json.Marshal(strct.MarketingStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "masterFile" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"masterFile\": ")
	if tmp, err := json.Marshal(strct.MasterFile); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Name" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "packagedMedicinalProduct" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"packagedMedicinalProduct\": ")
	if tmp, err := json.Marshal(strct.PackagedMedicinalProduct); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "paediatricUseIndicator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"paediatricUseIndicator\": ")
	if tmp, err := json.Marshal(strct.PaediatricUseIndicator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "pharmaceuticalProduct" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pharmaceuticalProduct\": ")
	if tmp, err := json.Marshal(strct.PharmaceuticalProduct); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productClassification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productClassification\": ")
	if tmp, err := json.Marshal(strct.ProductClassification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specialDesignation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specialDesignation\": ")
	if tmp, err := json.Marshal(strct.SpecialDesignation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specialMeasures" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specialMeasures\": ")
	if tmp, err := json.Marshal(strct.SpecialMeasures); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MedicinalProduct) UnmarshalJSON(b []byte) error {
    nameReceived := false
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "additionalMonitoringIndicator":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalMonitoringIndicator); err != nil {
                return err
             }
        case "attachedDocument":
            if err := json.Unmarshal([]byte(v), &strct.AttachedDocument); err != nil {
                return err
             }
        case "clinicalTrial":
            if err := json.Unmarshal([]byte(v), &strct.ClinicalTrial); err != nil {
                return err
             }
        case "combinedPharmaceuticalDoseForm":
            if err := json.Unmarshal([]byte(v), &strct.CombinedPharmaceuticalDoseForm); err != nil {
                return err
             }
        case "contact":
            if err := json.Unmarshal([]byte(v), &strct.Contact); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "crossReference":
            if err := json.Unmarshal([]byte(v), &strct.CrossReference); err != nil {
                return err
             }
        case "domain":
            if err := json.Unmarshal([]byte(v), &strct.Domain); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "legalStatusOfSupply":
            if err := json.Unmarshal([]byte(v), &strct.LegalStatusOfSupply); err != nil {
                return err
             }
        case "manufacturingBusinessOperation":
            if err := json.Unmarshal([]byte(v), &strct.ManufacturingBusinessOperation); err != nil {
                return err
             }
        case "marketingStatus":
            if err := json.Unmarshal([]byte(v), &strct.MarketingStatus); err != nil {
                return err
             }
        case "masterFile":
            if err := json.Unmarshal([]byte(v), &strct.MasterFile); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
            nameReceived = true
        case "packagedMedicinalProduct":
            if err := json.Unmarshal([]byte(v), &strct.PackagedMedicinalProduct); err != nil {
                return err
             }
        case "paediatricUseIndicator":
            if err := json.Unmarshal([]byte(v), &strct.PaediatricUseIndicator); err != nil {
                return err
             }
        case "pharmaceuticalProduct":
            if err := json.Unmarshal([]byte(v), &strct.PharmaceuticalProduct); err != nil {
                return err
             }
        case "productClassification":
            if err := json.Unmarshal([]byte(v), &strct.ProductClassification); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "specialDesignation":
            if err := json.Unmarshal([]byte(v), &strct.SpecialDesignation); err != nil {
                return err
             }
        case "specialMeasures":
            if err := json.Unmarshal([]byte(v), &strct.SpecialMeasures); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if name (a required property) was received
    if !nameReceived {
        return errors.New("\"name\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
