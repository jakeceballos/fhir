// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// Dosage Indicates how the medication is/was taken or should be taken by the patient.
type Dosage struct {

  // Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
  AdditionalInstruction []*CodeableConcept `json:"additionalInstruction,omitempty"`

  // Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  AsNeededBoolean bool `json:"asNeededBoolean,omitempty"`

  // Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
  AsNeededCodeableConcept *CodeableConcept `json:"asNeededCodeableConcept,omitempty"`

  // The amount of medication administered.
  DoseAndRate []*DosageDoseAndRate `json:"doseAndRate,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // Upper limit on medication per administration.
  MaxDosePerAdministration *Quantity `json:"maxDosePerAdministration,omitempty"`

  // Upper limit on medication per lifetime of the patient.
  MaxDosePerLifetime *Quantity `json:"maxDosePerLifetime,omitempty"`

  // Upper limit on medication per unit of time.
  MaxDosePerPeriod *Ratio `json:"maxDosePerPeriod,omitempty"`

  // Technique for administering medication.
  Method *CodeableConcept `json:"method,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Instructions in terms that are understood by the patient or consumer.
  PatientInstruction string `json:"patientInstruction,omitempty"`

  // How drug should enter body.
  Route *CodeableConcept `json:"route,omitempty"`

  // Indicates the order in which the dosage instructions should be applied or interpreted.
  Sequence float64 `json:"sequence,omitempty"`

  // Body site to administer to.
  Site *CodeableConcept `json:"site,omitempty"`

  // Free text dosage instructions e.g. SIG.
  Text string `json:"text,omitempty"`

  // When medication should be administered.
  Timing *Timing `json:"timing,omitempty"`
}

func (strct *Dosage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "additionalInstruction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"additionalInstruction\": ")
	if tmp, err := json.Marshal(strct.AdditionalInstruction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "asNeededBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"asNeededBoolean\": ")
	if tmp, err := json.Marshal(strct.AsNeededBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "asNeededCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"asNeededCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.AsNeededCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doseAndRate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doseAndRate\": ")
	if tmp, err := json.Marshal(strct.DoseAndRate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maxDosePerAdministration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maxDosePerAdministration\": ")
	if tmp, err := json.Marshal(strct.MaxDosePerAdministration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maxDosePerLifetime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maxDosePerLifetime\": ")
	if tmp, err := json.Marshal(strct.MaxDosePerLifetime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maxDosePerPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maxDosePerPeriod\": ")
	if tmp, err := json.Marshal(strct.MaxDosePerPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "method" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"method\": ")
	if tmp, err := json.Marshal(strct.Method); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "patientInstruction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patientInstruction\": ")
	if tmp, err := json.Marshal(strct.PatientInstruction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "route" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"route\": ")
	if tmp, err := json.Marshal(strct.Route); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sequence" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sequence\": ")
	if tmp, err := json.Marshal(strct.Sequence); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "site" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"site\": ")
	if tmp, err := json.Marshal(strct.Site); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timing" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timing\": ")
	if tmp, err := json.Marshal(strct.Timing); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Dosage) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "additionalInstruction":
            if err := json.Unmarshal([]byte(v), &strct.AdditionalInstruction); err != nil {
                return err
             }
        case "asNeededBoolean":
            if err := json.Unmarshal([]byte(v), &strct.AsNeededBoolean); err != nil {
                return err
             }
        case "asNeededCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.AsNeededCodeableConcept); err != nil {
                return err
             }
        case "doseAndRate":
            if err := json.Unmarshal([]byte(v), &strct.DoseAndRate); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "maxDosePerAdministration":
            if err := json.Unmarshal([]byte(v), &strct.MaxDosePerAdministration); err != nil {
                return err
             }
        case "maxDosePerLifetime":
            if err := json.Unmarshal([]byte(v), &strct.MaxDosePerLifetime); err != nil {
                return err
             }
        case "maxDosePerPeriod":
            if err := json.Unmarshal([]byte(v), &strct.MaxDosePerPeriod); err != nil {
                return err
             }
        case "method":
            if err := json.Unmarshal([]byte(v), &strct.Method); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "patientInstruction":
            if err := json.Unmarshal([]byte(v), &strct.PatientInstruction); err != nil {
                return err
             }
        case "route":
            if err := json.Unmarshal([]byte(v), &strct.Route); err != nil {
                return err
             }
        case "sequence":
            if err := json.Unmarshal([]byte(v), &strct.Sequence); err != nil {
                return err
             }
        case "site":
            if err := json.Unmarshal([]byte(v), &strct.Site); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "timing":
            if err := json.Unmarshal([]byte(v), &strct.Timing); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
