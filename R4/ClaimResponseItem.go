// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// ClaimResponseItem This resource provides the adjudication details from the processing of a Claim resource.
type ClaimResponseItem struct {

  // If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
  Adjudication []*ClaimResponseAdjudication `json:"adjudication"`

  // A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
  Detail []*ClaimResponseDetail `json:"detail,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // A number to uniquely reference the claim item entries.
  ItemSequence float64 `json:"itemSequence,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The numbers associated with notes below which apply to the adjudication of this item.
  NoteNumber []float64 `json:"noteNumber,omitempty"`
}

func (strct *ClaimResponseItem) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Adjudication" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "adjudication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"adjudication\": ")
	if tmp, err := json.Marshal(strct.Adjudication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "detail" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"detail\": ")
	if tmp, err := json.Marshal(strct.Detail); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "itemSequence" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"itemSequence\": ")
	if tmp, err := json.Marshal(strct.ItemSequence); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "noteNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"noteNumber\": ")
	if tmp, err := json.Marshal(strct.NoteNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClaimResponseItem) UnmarshalJSON(b []byte) error {
    adjudicationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "adjudication":
            if err := json.Unmarshal([]byte(v), &strct.Adjudication); err != nil {
                return err
             }
            adjudicationReceived = true
        case "detail":
            if err := json.Unmarshal([]byte(v), &strct.Detail); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "itemSequence":
            if err := json.Unmarshal([]byte(v), &strct.ItemSequence); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "noteNumber":
            if err := json.Unmarshal([]byte(v), &strct.NoteNumber); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if adjudication (a required property) was received
    if !adjudicationReceived {
        return errors.New("\"adjudication\" is required but was not present")
    }
    return nil
}
