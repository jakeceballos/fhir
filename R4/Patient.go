// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// Patient Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type Patient struct {

  // Whether this patient record is in active use. 
  // Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.
  // 
  // It is often used to filter patient lists to exclude inactive patients
  // 
  // Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.
  Active bool `json:"active,omitempty"`

  // An address for the individual.
  Address []*Address `json:"address,omitempty"`

  // The date of birth for the individual.
  BirthDate string `json:"birthDate,omitempty"`

  // A language which may be used to communicate with the patient about his or her health.
  Communication []*PatientCommunication `json:"communication,omitempty"`

  // A contact party (e.g. guardian, partner, friend) for the patient.
  Contact []*PatientContact `json:"contact,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // Indicates if the individual is deceased or not.
  DeceasedBoolean bool `json:"deceasedBoolean,omitempty"`

  // Indicates if the individual is deceased or not.
  DeceasedDateTime string `json:"deceasedDateTime,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.
  Gender interface{} `json:"gender,omitempty"`

  // Patient's nominated care provider.
  GeneralPractitioner []*Reference `json:"generalPractitioner,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // An identifier for this patient.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // Link to another patient resource that concerns the same actual patient.
  Link []*PatientLink `json:"link,omitempty"`

  // Organization that is the custodian of the patient record.
  ManagingOrganization *Reference `json:"managingOrganization,omitempty"`

  // This field contains a patient's most recent marital (civil) status.
  MaritalStatus *CodeableConcept `json:"maritalStatus,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  MultipleBirthBoolean bool `json:"multipleBirthBoolean,omitempty"`

  // Indicates whether the patient is part of a multiple (boolean) or indicates the actual birth order (integer).
  MultipleBirthInteger float64 `json:"multipleBirthInteger,omitempty"`

  // A name associated with the individual.
  Name []*HumanName `json:"name,omitempty"`

  // Image of the patient.
  Photo []*Attachment `json:"photo,omitempty"`

  // This is a Patient resource
  ResourceType interface{} `json:"resourceType"`

  // A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.
  Telecom []*ContactPoint `json:"telecom,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`
}

func (strct *Patient) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "active" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"active\": ")
	if tmp, err := json.Marshal(strct.Active); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "address" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"address\": ")
	if tmp, err := json.Marshal(strct.Address); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "birthDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"birthDate\": ")
	if tmp, err := json.Marshal(strct.BirthDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "communication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"communication\": ")
	if tmp, err := json.Marshal(strct.Communication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contact\": ")
	if tmp, err := json.Marshal(strct.Contact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "deceasedBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"deceasedBoolean\": ")
	if tmp, err := json.Marshal(strct.DeceasedBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "deceasedDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"deceasedDateTime\": ")
	if tmp, err := json.Marshal(strct.DeceasedDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "gender" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"gender\": ")
	if tmp, err := json.Marshal(strct.Gender); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "generalPractitioner" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"generalPractitioner\": ")
	if tmp, err := json.Marshal(strct.GeneralPractitioner); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "link" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"link\": ")
	if tmp, err := json.Marshal(strct.Link); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "managingOrganization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"managingOrganization\": ")
	if tmp, err := json.Marshal(strct.ManagingOrganization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maritalStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maritalStatus\": ")
	if tmp, err := json.Marshal(strct.MaritalStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "multipleBirthBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"multipleBirthBoolean\": ")
	if tmp, err := json.Marshal(strct.MultipleBirthBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "multipleBirthInteger" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"multipleBirthInteger\": ")
	if tmp, err := json.Marshal(strct.MultipleBirthInteger); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "photo" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"photo\": ")
	if tmp, err := json.Marshal(strct.Photo); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "telecom" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"telecom\": ")
	if tmp, err := json.Marshal(strct.Telecom); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Patient) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "active":
            if err := json.Unmarshal([]byte(v), &strct.Active); err != nil {
                return err
             }
        case "address":
            if err := json.Unmarshal([]byte(v), &strct.Address); err != nil {
                return err
             }
        case "birthDate":
            if err := json.Unmarshal([]byte(v), &strct.BirthDate); err != nil {
                return err
             }
        case "communication":
            if err := json.Unmarshal([]byte(v), &strct.Communication); err != nil {
                return err
             }
        case "contact":
            if err := json.Unmarshal([]byte(v), &strct.Contact); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "deceasedBoolean":
            if err := json.Unmarshal([]byte(v), &strct.DeceasedBoolean); err != nil {
                return err
             }
        case "deceasedDateTime":
            if err := json.Unmarshal([]byte(v), &strct.DeceasedDateTime); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "gender":
            if err := json.Unmarshal([]byte(v), &strct.Gender); err != nil {
                return err
             }
        case "generalPractitioner":
            if err := json.Unmarshal([]byte(v), &strct.GeneralPractitioner); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "link":
            if err := json.Unmarshal([]byte(v), &strct.Link); err != nil {
                return err
             }
        case "managingOrganization":
            if err := json.Unmarshal([]byte(v), &strct.ManagingOrganization); err != nil {
                return err
             }
        case "maritalStatus":
            if err := json.Unmarshal([]byte(v), &strct.MaritalStatus); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "multipleBirthBoolean":
            if err := json.Unmarshal([]byte(v), &strct.MultipleBirthBoolean); err != nil {
                return err
             }
        case "multipleBirthInteger":
            if err := json.Unmarshal([]byte(v), &strct.MultipleBirthInteger); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "photo":
            if err := json.Unmarshal([]byte(v), &strct.Photo); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "telecom":
            if err := json.Unmarshal([]byte(v), &strct.Telecom); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
