// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// ActivityDefinition This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition struct {

  // The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
  ApprovalDate string `json:"approvalDate,omitempty"`

  // An individiual or organization primarily involved in the creation and maintenance of the content.
  Author []*ContactDetail `json:"author,omitempty"`

  // Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).
  BodySite []*CodeableConcept `json:"bodySite,omitempty"`

  // Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.
  Code *CodeableConcept `json:"code,omitempty"`

  // Contact details to assist a user in finding and communicating with the publisher.
  Contact []*ContactDetail `json:"contact,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.
  Copyright string `json:"copyright,omitempty"`

  // The date  (and optionally time) when the activity definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.
  Date string `json:"date,omitempty"`

  // A free text natural language description of the activity definition from a consumer's perspective.
  Description string `json:"description,omitempty"`

  // Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.
  DoNotPerform bool `json:"doNotPerform,omitempty"`

  // Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.
  Dosage []*Dosage `json:"dosage,omitempty"`

  // Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
  DynamicValue []*ActivityDefinitionDynamicValue `json:"dynamicValue,omitempty"`

  // An individual or organization primarily responsible for internal coherence of the content.
  Editor []*ContactDetail `json:"editor,omitempty"`

  // The period during which the activity definition content was or is planned to be in active use.
  EffectivePeriod *Period `json:"effectivePeriod,omitempty"`

  // An individual or organization responsible for officially endorsing the content for use in some setting.
  Endorser []*ContactDetail `json:"endorser,omitempty"`

  // A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
  Experimental bool `json:"experimental,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.
  Intent string `json:"intent,omitempty"`

  // A legal or geographic region in which the activity definition is intended to be used.
  Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`

  // A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest. Typically, but not always, this is a Request resource.
  Kind string `json:"kind,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
  LastReviewDate string `json:"lastReviewDate,omitempty"`

  // A reference to a Library resource containing any formal logic used by the activity definition.
  Library []string `json:"library,omitempty"`

  // Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
  Location *Reference `json:"location,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
  Name string `json:"name,omitempty"`

  // Defines observation requirements for the action to be performed, such as body weight or surface area.
  ObservationRequirement []*Reference `json:"observationRequirement,omitempty"`

  // Defines the observations that are expected to be produced by the action.
  ObservationResultRequirement []*Reference `json:"observationResultRequirement,omitempty"`

  // Indicates who should participate in performing the action described.
  Participant []*ActivityDefinitionParticipant `json:"participant,omitempty"`

  // Indicates how quickly the activity  should be addressed with respect to other requests.
  Priority string `json:"priority,omitempty"`

  // Identifies the food, drug or other product being consumed or supplied in the activity.
  ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept,omitempty"`

  // Identifies the food, drug or other product being consumed or supplied in the activity.
  ProductReference *Reference `json:"productReference,omitempty"`

  // A profile to which the target of the activity definition is expected to conform.
  Profile string `json:"profile,omitempty"`

  // The name of the organization or individual that published the activity definition.
  Publisher string `json:"publisher,omitempty"`

  // Explanation of why this activity definition is needed and why it has been designed as it has.
  Purpose string `json:"purpose,omitempty"`

  // Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).
  Quantity *Quantity `json:"quantity,omitempty"`

  // Related artifacts such as additional documentation, justification, or bibliographic references.
  RelatedArtifact []*RelatedArtifact `json:"relatedArtifact,omitempty"`

  // This is a ActivityDefinition resource
  ResourceType interface{} `json:"resourceType"`

  // An individual or organization primarily responsible for review of some aspect of the content.
  Reviewer []*ContactDetail `json:"reviewer,omitempty"`

  // Defines specimen requirements for the action to be performed, such as required specimens for a lab test.
  SpecimenRequirement []*Reference `json:"specimenRequirement,omitempty"`

  // The status of this activity definition. Enables tracking the life-cycle of the content.
  Status interface{} `json:"status,omitempty"`

  // A code or group definition that describes the intended subject of the activity being defined.
  SubjectCodeableConcept *CodeableConcept `json:"subjectCodeableConcept,omitempty"`

  // A code or group definition that describes the intended subject of the activity being defined.
  SubjectReference *Reference `json:"subjectReference,omitempty"`

  // An explanatory or alternate title for the activity definition giving additional information about its content.
  Subtitle string `json:"subtitle,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingAge *Age `json:"timingAge,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingDateTime string `json:"timingDateTime,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingDuration *Duration `json:"timingDuration,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingPeriod *Period `json:"timingPeriod,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingRange *Range `json:"timingRange,omitempty"`

  // The period, timing or frequency upon which the described activity is to occur.
  TimingTiming *Timing `json:"timingTiming,omitempty"`

  // A short, descriptive, user-friendly title for the activity definition.
  Title string `json:"title,omitempty"`

  // Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.
  Topic []*CodeableConcept `json:"topic,omitempty"`

  // A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
  Transform string `json:"transform,omitempty"`

  // An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.
  Url string `json:"url,omitempty"`

  // A detailed description of how the activity definition is used from a clinical perspective.
  Usage string `json:"usage,omitempty"`

  // The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.
  UseContext []*UsageContext `json:"useContext,omitempty"`

  // The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.
  Version string `json:"version,omitempty"`
}

func (strct *ActivityDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "approvalDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"approvalDate\": ")
	if tmp, err := json.Marshal(strct.ApprovalDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "author" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"author\": ")
	if tmp, err := json.Marshal(strct.Author); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "bodySite" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bodySite\": ")
	if tmp, err := json.Marshal(strct.BodySite); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contact\": ")
	if tmp, err := json.Marshal(strct.Contact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "copyright" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"copyright\": ")
	if tmp, err := json.Marshal(strct.Copyright); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "date" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"date\": ")
	if tmp, err := json.Marshal(strct.Date); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doNotPerform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doNotPerform\": ")
	if tmp, err := json.Marshal(strct.DoNotPerform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dosage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dosage\": ")
	if tmp, err := json.Marshal(strct.Dosage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dynamicValue" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dynamicValue\": ")
	if tmp, err := json.Marshal(strct.DynamicValue); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "editor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"editor\": ")
	if tmp, err := json.Marshal(strct.Editor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "effectivePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"effectivePeriod\": ")
	if tmp, err := json.Marshal(strct.EffectivePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "endorser" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"endorser\": ")
	if tmp, err := json.Marshal(strct.Endorser); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "experimental" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"experimental\": ")
	if tmp, err := json.Marshal(strct.Experimental); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "intent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"intent\": ")
	if tmp, err := json.Marshal(strct.Intent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jurisdiction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jurisdiction\": ")
	if tmp, err := json.Marshal(strct.Jurisdiction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "kind" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"kind\": ")
	if tmp, err := json.Marshal(strct.Kind); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lastReviewDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lastReviewDate\": ")
	if tmp, err := json.Marshal(strct.LastReviewDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "library" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"library\": ")
	if tmp, err := json.Marshal(strct.Library); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"location\": ")
	if tmp, err := json.Marshal(strct.Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "observationRequirement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"observationRequirement\": ")
	if tmp, err := json.Marshal(strct.ObservationRequirement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "observationResultRequirement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"observationResultRequirement\": ")
	if tmp, err := json.Marshal(strct.ObservationResultRequirement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "participant" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"participant\": ")
	if tmp, err := json.Marshal(strct.Participant); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.ProductCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productReference\": ")
	if tmp, err := json.Marshal(strct.ProductReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "profile" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"profile\": ")
	if tmp, err := json.Marshal(strct.Profile); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "publisher" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"publisher\": ")
	if tmp, err := json.Marshal(strct.Publisher); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "purpose" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"purpose\": ")
	if tmp, err := json.Marshal(strct.Purpose); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quantity\": ")
	if tmp, err := json.Marshal(strct.Quantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "relatedArtifact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"relatedArtifact\": ")
	if tmp, err := json.Marshal(strct.RelatedArtifact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reviewer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reviewer\": ")
	if tmp, err := json.Marshal(strct.Reviewer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specimenRequirement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specimenRequirement\": ")
	if tmp, err := json.Marshal(strct.SpecimenRequirement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subjectCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subjectCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.SubjectCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subjectReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subjectReference\": ")
	if tmp, err := json.Marshal(strct.SubjectReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subtitle" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subtitle\": ")
	if tmp, err := json.Marshal(strct.Subtitle); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingAge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingAge\": ")
	if tmp, err := json.Marshal(strct.TimingAge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDateTime\": ")
	if tmp, err := json.Marshal(strct.TimingDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDuration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDuration\": ")
	if tmp, err := json.Marshal(strct.TimingDuration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingPeriod\": ")
	if tmp, err := json.Marshal(strct.TimingPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingRange\": ")
	if tmp, err := json.Marshal(strct.TimingRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingTiming\": ")
	if tmp, err := json.Marshal(strct.TimingTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "title" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"title\": ")
	if tmp, err := json.Marshal(strct.Title); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "topic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"topic\": ")
	if tmp, err := json.Marshal(strct.Topic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "transform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"transform\": ")
	if tmp, err := json.Marshal(strct.Transform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "usage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"usage\": ")
	if tmp, err := json.Marshal(strct.Usage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "useContext" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"useContext\": ")
	if tmp, err := json.Marshal(strct.UseContext); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ActivityDefinition) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "approvalDate":
            if err := json.Unmarshal([]byte(v), &strct.ApprovalDate); err != nil {
                return err
             }
        case "author":
            if err := json.Unmarshal([]byte(v), &strct.Author); err != nil {
                return err
             }
        case "bodySite":
            if err := json.Unmarshal([]byte(v), &strct.BodySite); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
        case "contact":
            if err := json.Unmarshal([]byte(v), &strct.Contact); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "copyright":
            if err := json.Unmarshal([]byte(v), &strct.Copyright); err != nil {
                return err
             }
        case "date":
            if err := json.Unmarshal([]byte(v), &strct.Date); err != nil {
                return err
             }
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "doNotPerform":
            if err := json.Unmarshal([]byte(v), &strct.DoNotPerform); err != nil {
                return err
             }
        case "dosage":
            if err := json.Unmarshal([]byte(v), &strct.Dosage); err != nil {
                return err
             }
        case "dynamicValue":
            if err := json.Unmarshal([]byte(v), &strct.DynamicValue); err != nil {
                return err
             }
        case "editor":
            if err := json.Unmarshal([]byte(v), &strct.Editor); err != nil {
                return err
             }
        case "effectivePeriod":
            if err := json.Unmarshal([]byte(v), &strct.EffectivePeriod); err != nil {
                return err
             }
        case "endorser":
            if err := json.Unmarshal([]byte(v), &strct.Endorser); err != nil {
                return err
             }
        case "experimental":
            if err := json.Unmarshal([]byte(v), &strct.Experimental); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "intent":
            if err := json.Unmarshal([]byte(v), &strct.Intent); err != nil {
                return err
             }
        case "jurisdiction":
            if err := json.Unmarshal([]byte(v), &strct.Jurisdiction); err != nil {
                return err
             }
        case "kind":
            if err := json.Unmarshal([]byte(v), &strct.Kind); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "lastReviewDate":
            if err := json.Unmarshal([]byte(v), &strct.LastReviewDate); err != nil {
                return err
             }
        case "library":
            if err := json.Unmarshal([]byte(v), &strct.Library); err != nil {
                return err
             }
        case "location":
            if err := json.Unmarshal([]byte(v), &strct.Location); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "observationRequirement":
            if err := json.Unmarshal([]byte(v), &strct.ObservationRequirement); err != nil {
                return err
             }
        case "observationResultRequirement":
            if err := json.Unmarshal([]byte(v), &strct.ObservationResultRequirement); err != nil {
                return err
             }
        case "participant":
            if err := json.Unmarshal([]byte(v), &strct.Participant); err != nil {
                return err
             }
        case "priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
        case "productCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.ProductCodeableConcept); err != nil {
                return err
             }
        case "productReference":
            if err := json.Unmarshal([]byte(v), &strct.ProductReference); err != nil {
                return err
             }
        case "profile":
            if err := json.Unmarshal([]byte(v), &strct.Profile); err != nil {
                return err
             }
        case "publisher":
            if err := json.Unmarshal([]byte(v), &strct.Publisher); err != nil {
                return err
             }
        case "purpose":
            if err := json.Unmarshal([]byte(v), &strct.Purpose); err != nil {
                return err
             }
        case "quantity":
            if err := json.Unmarshal([]byte(v), &strct.Quantity); err != nil {
                return err
             }
        case "relatedArtifact":
            if err := json.Unmarshal([]byte(v), &strct.RelatedArtifact); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "reviewer":
            if err := json.Unmarshal([]byte(v), &strct.Reviewer); err != nil {
                return err
             }
        case "specimenRequirement":
            if err := json.Unmarshal([]byte(v), &strct.SpecimenRequirement); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "subjectCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.SubjectCodeableConcept); err != nil {
                return err
             }
        case "subjectReference":
            if err := json.Unmarshal([]byte(v), &strct.SubjectReference); err != nil {
                return err
             }
        case "subtitle":
            if err := json.Unmarshal([]byte(v), &strct.Subtitle); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "timingAge":
            if err := json.Unmarshal([]byte(v), &strct.TimingAge); err != nil {
                return err
             }
        case "timingDateTime":
            if err := json.Unmarshal([]byte(v), &strct.TimingDateTime); err != nil {
                return err
             }
        case "timingDuration":
            if err := json.Unmarshal([]byte(v), &strct.TimingDuration); err != nil {
                return err
             }
        case "timingPeriod":
            if err := json.Unmarshal([]byte(v), &strct.TimingPeriod); err != nil {
                return err
             }
        case "timingRange":
            if err := json.Unmarshal([]byte(v), &strct.TimingRange); err != nil {
                return err
             }
        case "timingTiming":
            if err := json.Unmarshal([]byte(v), &strct.TimingTiming); err != nil {
                return err
             }
        case "title":
            if err := json.Unmarshal([]byte(v), &strct.Title); err != nil {
                return err
             }
        case "topic":
            if err := json.Unmarshal([]byte(v), &strct.Topic); err != nil {
                return err
             }
        case "transform":
            if err := json.Unmarshal([]byte(v), &strct.Transform); err != nil {
                return err
             }
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        case "usage":
            if err := json.Unmarshal([]byte(v), &strct.Usage); err != nil {
                return err
             }
        case "useContext":
            if err := json.Unmarshal([]byte(v), &strct.UseContext); err != nil {
                return err
             }
        case "version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
