// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// StructureMapSource A Map of relationships between 2 structures that can be used to transform data.
type StructureMapSource struct {

  // FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.
  Check string `json:"check,omitempty"`

  // FHIRPath expression  - must be true or the rule does not apply.
  Condition string `json:"condition,omitempty"`

  // Type or variable this rule applies to.
  Context string `json:"context,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueAddress *Address `json:"defaultValueAddress,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueAge *Age `json:"defaultValueAge,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueAnnotation *Annotation `json:"defaultValueAnnotation,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueAttachment *Attachment `json:"defaultValueAttachment,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueBase64Binary string `json:"defaultValueBase64Binary,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueBoolean bool `json:"defaultValueBoolean,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueCanonical string `json:"defaultValueCanonical,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueCode string `json:"defaultValueCode,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueCodeableConcept *CodeableConcept `json:"defaultValueCodeableConcept,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueCoding *Coding `json:"defaultValueCoding,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueContactDetail *ContactDetail `json:"defaultValueContactDetail,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueContactPoint *ContactPoint `json:"defaultValueContactPoint,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueContributor *Contributor `json:"defaultValueContributor,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueCount *Count `json:"defaultValueCount,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDataRequirement *DataRequirement `json:"defaultValueDataRequirement,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDate string `json:"defaultValueDate,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDateTime string `json:"defaultValueDateTime,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDecimal float64 `json:"defaultValueDecimal,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDistance *Distance `json:"defaultValueDistance,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDosage *Dosage `json:"defaultValueDosage,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueDuration *Duration `json:"defaultValueDuration,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueExpression *Expression `json:"defaultValueExpression,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueHumanName *HumanName `json:"defaultValueHumanName,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueId string `json:"defaultValueId,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueIdentifier *Identifier `json:"defaultValueIdentifier,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueInstant string `json:"defaultValueInstant,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueInteger float64 `json:"defaultValueInteger,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueMarkdown string `json:"defaultValueMarkdown,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueMoney *Money `json:"defaultValueMoney,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueOid string `json:"defaultValueOid,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueParameterDefinition *ParameterDefinition `json:"defaultValueParameterDefinition,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValuePeriod *Period `json:"defaultValuePeriod,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValuePositiveInt float64 `json:"defaultValuePositiveInt,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueQuantity *Quantity `json:"defaultValueQuantity,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueRange *Range `json:"defaultValueRange,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueRatio *Ratio `json:"defaultValueRatio,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueReference *Reference `json:"defaultValueReference,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueRelatedArtifact *RelatedArtifact `json:"defaultValueRelatedArtifact,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueSampledData *SampledData `json:"defaultValueSampledData,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueSignature *Signature `json:"defaultValueSignature,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueString string `json:"defaultValueString,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueTime string `json:"defaultValueTime,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueTiming *Timing `json:"defaultValueTiming,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueTriggerDefinition *TriggerDefinition `json:"defaultValueTriggerDefinition,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueUnsignedInt float64 `json:"defaultValueUnsignedInt,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueUri string `json:"defaultValueUri,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueUrl string `json:"defaultValueUrl,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueUsageContext *UsageContext `json:"defaultValueUsageContext,omitempty"`

  // A value to use if there is no existing value in the source object.
  DefaultValueUuid string `json:"defaultValueUuid,omitempty"`

  // Optional field for this source.
  Element string `json:"element,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // How to handle the list mode for this element.
  ListMode interface{} `json:"listMode,omitempty"`

  // A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.
  LogMessage string `json:"logMessage,omitempty"`

  // Specified maximum cardinality for the element - a number or a "*". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).
  Max string `json:"max,omitempty"`

  // Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.
  Min float64 `json:"min,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.
  Type string `json:"type,omitempty"`

  // Named context for field, if a field is specified.
  Variable string `json:"variable,omitempty"`
}

func (strct *StructureMapSource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "check" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"check\": ")
	if tmp, err := json.Marshal(strct.Check); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "condition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"condition\": ")
	if tmp, err := json.Marshal(strct.Condition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "context" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"context\": ")
	if tmp, err := json.Marshal(strct.Context); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueAddress" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueAddress\": ")
	if tmp, err := json.Marshal(strct.DefaultValueAddress); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueAge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueAge\": ")
	if tmp, err := json.Marshal(strct.DefaultValueAge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueAnnotation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueAnnotation\": ")
	if tmp, err := json.Marshal(strct.DefaultValueAnnotation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueAttachment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueAttachment\": ")
	if tmp, err := json.Marshal(strct.DefaultValueAttachment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueBase64Binary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueBase64Binary\": ")
	if tmp, err := json.Marshal(strct.DefaultValueBase64Binary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueBoolean\": ")
	if tmp, err := json.Marshal(strct.DefaultValueBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueCanonical" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueCanonical\": ")
	if tmp, err := json.Marshal(strct.DefaultValueCanonical); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueCode\": ")
	if tmp, err := json.Marshal(strct.DefaultValueCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.DefaultValueCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueCoding" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueCoding\": ")
	if tmp, err := json.Marshal(strct.DefaultValueCoding); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueContactDetail" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueContactDetail\": ")
	if tmp, err := json.Marshal(strct.DefaultValueContactDetail); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueContactPoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueContactPoint\": ")
	if tmp, err := json.Marshal(strct.DefaultValueContactPoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueContributor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueContributor\": ")
	if tmp, err := json.Marshal(strct.DefaultValueContributor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueCount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueCount\": ")
	if tmp, err := json.Marshal(strct.DefaultValueCount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDataRequirement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDataRequirement\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDataRequirement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDate\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDateTime\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDecimal" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDecimal\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDecimal); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDistance" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDistance\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDistance); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDosage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDosage\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDosage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueDuration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueDuration\": ")
	if tmp, err := json.Marshal(strct.DefaultValueDuration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueExpression\": ")
	if tmp, err := json.Marshal(strct.DefaultValueExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueHumanName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueHumanName\": ")
	if tmp, err := json.Marshal(strct.DefaultValueHumanName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueId\": ")
	if tmp, err := json.Marshal(strct.DefaultValueId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueIdentifier\": ")
	if tmp, err := json.Marshal(strct.DefaultValueIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueInstant" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueInstant\": ")
	if tmp, err := json.Marshal(strct.DefaultValueInstant); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueInteger" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueInteger\": ")
	if tmp, err := json.Marshal(strct.DefaultValueInteger); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueMarkdown" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueMarkdown\": ")
	if tmp, err := json.Marshal(strct.DefaultValueMarkdown); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueMoney" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueMoney\": ")
	if tmp, err := json.Marshal(strct.DefaultValueMoney); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueOid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueOid\": ")
	if tmp, err := json.Marshal(strct.DefaultValueOid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueParameterDefinition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueParameterDefinition\": ")
	if tmp, err := json.Marshal(strct.DefaultValueParameterDefinition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValuePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValuePeriod\": ")
	if tmp, err := json.Marshal(strct.DefaultValuePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValuePositiveInt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValuePositiveInt\": ")
	if tmp, err := json.Marshal(strct.DefaultValuePositiveInt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueQuantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueQuantity\": ")
	if tmp, err := json.Marshal(strct.DefaultValueQuantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueRange\": ")
	if tmp, err := json.Marshal(strct.DefaultValueRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueRatio" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueRatio\": ")
	if tmp, err := json.Marshal(strct.DefaultValueRatio); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueReference\": ")
	if tmp, err := json.Marshal(strct.DefaultValueReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueRelatedArtifact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueRelatedArtifact\": ")
	if tmp, err := json.Marshal(strct.DefaultValueRelatedArtifact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueSampledData" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueSampledData\": ")
	if tmp, err := json.Marshal(strct.DefaultValueSampledData); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueSignature" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueSignature\": ")
	if tmp, err := json.Marshal(strct.DefaultValueSignature); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueString\": ")
	if tmp, err := json.Marshal(strct.DefaultValueString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueTime\": ")
	if tmp, err := json.Marshal(strct.DefaultValueTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueTiming\": ")
	if tmp, err := json.Marshal(strct.DefaultValueTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueTriggerDefinition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueTriggerDefinition\": ")
	if tmp, err := json.Marshal(strct.DefaultValueTriggerDefinition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueUnsignedInt" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueUnsignedInt\": ")
	if tmp, err := json.Marshal(strct.DefaultValueUnsignedInt); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueUri\": ")
	if tmp, err := json.Marshal(strct.DefaultValueUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueUrl\": ")
	if tmp, err := json.Marshal(strct.DefaultValueUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueUsageContext" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueUsageContext\": ")
	if tmp, err := json.Marshal(strct.DefaultValueUsageContext); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "defaultValueUuid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"defaultValueUuid\": ")
	if tmp, err := json.Marshal(strct.DefaultValueUuid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "element" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"element\": ")
	if tmp, err := json.Marshal(strct.Element); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "listMode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"listMode\": ")
	if tmp, err := json.Marshal(strct.ListMode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "logMessage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"logMessage\": ")
	if tmp, err := json.Marshal(strct.LogMessage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "max" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"max\": ")
	if tmp, err := json.Marshal(strct.Max); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "min" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"min\": ")
	if tmp, err := json.Marshal(strct.Min); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "variable" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"variable\": ")
	if tmp, err := json.Marshal(strct.Variable); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *StructureMapSource) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "check":
            if err := json.Unmarshal([]byte(v), &strct.Check); err != nil {
                return err
             }
        case "condition":
            if err := json.Unmarshal([]byte(v), &strct.Condition); err != nil {
                return err
             }
        case "context":
            if err := json.Unmarshal([]byte(v), &strct.Context); err != nil {
                return err
             }
        case "defaultValueAddress":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueAddress); err != nil {
                return err
             }
        case "defaultValueAge":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueAge); err != nil {
                return err
             }
        case "defaultValueAnnotation":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueAnnotation); err != nil {
                return err
             }
        case "defaultValueAttachment":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueAttachment); err != nil {
                return err
             }
        case "defaultValueBase64Binary":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueBase64Binary); err != nil {
                return err
             }
        case "defaultValueBoolean":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueBoolean); err != nil {
                return err
             }
        case "defaultValueCanonical":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueCanonical); err != nil {
                return err
             }
        case "defaultValueCode":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueCode); err != nil {
                return err
             }
        case "defaultValueCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueCodeableConcept); err != nil {
                return err
             }
        case "defaultValueCoding":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueCoding); err != nil {
                return err
             }
        case "defaultValueContactDetail":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueContactDetail); err != nil {
                return err
             }
        case "defaultValueContactPoint":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueContactPoint); err != nil {
                return err
             }
        case "defaultValueContributor":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueContributor); err != nil {
                return err
             }
        case "defaultValueCount":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueCount); err != nil {
                return err
             }
        case "defaultValueDataRequirement":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDataRequirement); err != nil {
                return err
             }
        case "defaultValueDate":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDate); err != nil {
                return err
             }
        case "defaultValueDateTime":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDateTime); err != nil {
                return err
             }
        case "defaultValueDecimal":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDecimal); err != nil {
                return err
             }
        case "defaultValueDistance":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDistance); err != nil {
                return err
             }
        case "defaultValueDosage":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDosage); err != nil {
                return err
             }
        case "defaultValueDuration":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueDuration); err != nil {
                return err
             }
        case "defaultValueExpression":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueExpression); err != nil {
                return err
             }
        case "defaultValueHumanName":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueHumanName); err != nil {
                return err
             }
        case "defaultValueId":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueId); err != nil {
                return err
             }
        case "defaultValueIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueIdentifier); err != nil {
                return err
             }
        case "defaultValueInstant":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueInstant); err != nil {
                return err
             }
        case "defaultValueInteger":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueInteger); err != nil {
                return err
             }
        case "defaultValueMarkdown":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueMarkdown); err != nil {
                return err
             }
        case "defaultValueMoney":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueMoney); err != nil {
                return err
             }
        case "defaultValueOid":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueOid); err != nil {
                return err
             }
        case "defaultValueParameterDefinition":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueParameterDefinition); err != nil {
                return err
             }
        case "defaultValuePeriod":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValuePeriod); err != nil {
                return err
             }
        case "defaultValuePositiveInt":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValuePositiveInt); err != nil {
                return err
             }
        case "defaultValueQuantity":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueQuantity); err != nil {
                return err
             }
        case "defaultValueRange":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueRange); err != nil {
                return err
             }
        case "defaultValueRatio":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueRatio); err != nil {
                return err
             }
        case "defaultValueReference":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueReference); err != nil {
                return err
             }
        case "defaultValueRelatedArtifact":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueRelatedArtifact); err != nil {
                return err
             }
        case "defaultValueSampledData":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueSampledData); err != nil {
                return err
             }
        case "defaultValueSignature":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueSignature); err != nil {
                return err
             }
        case "defaultValueString":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueString); err != nil {
                return err
             }
        case "defaultValueTime":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueTime); err != nil {
                return err
             }
        case "defaultValueTiming":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueTiming); err != nil {
                return err
             }
        case "defaultValueTriggerDefinition":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueTriggerDefinition); err != nil {
                return err
             }
        case "defaultValueUnsignedInt":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueUnsignedInt); err != nil {
                return err
             }
        case "defaultValueUri":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueUri); err != nil {
                return err
             }
        case "defaultValueUrl":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueUrl); err != nil {
                return err
             }
        case "defaultValueUsageContext":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueUsageContext); err != nil {
                return err
             }
        case "defaultValueUuid":
            if err := json.Unmarshal([]byte(v), &strct.DefaultValueUuid); err != nil {
                return err
             }
        case "element":
            if err := json.Unmarshal([]byte(v), &strct.Element); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "listMode":
            if err := json.Unmarshal([]byte(v), &strct.ListMode); err != nil {
                return err
             }
        case "logMessage":
            if err := json.Unmarshal([]byte(v), &strct.LogMessage); err != nil {
                return err
             }
        case "max":
            if err := json.Unmarshal([]byte(v), &strct.Max); err != nil {
                return err
             }
        case "min":
            if err := json.Unmarshal([]byte(v), &strct.Min); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "variable":
            if err := json.Unmarshal([]byte(v), &strct.Variable); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
