// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// SubstanceSourceMaterialHybrid Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
type SubstanceSourceMaterialHybrid struct {

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The hybrid type of an organism shall be specified.
  HybridType *CodeableConcept `json:"hybridType,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
  MaternalOrganismId string `json:"maternalOrganismId,omitempty"`

  // The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.
  MaternalOrganismName string `json:"maternalOrganismName,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.
  PaternalOrganismId string `json:"paternalOrganismId,omitempty"`

  // The name of the paternal species constituting the hybrid organism shall be specified.
  PaternalOrganismName string `json:"paternalOrganismName,omitempty"`
}

func (strct *SubstanceSourceMaterialHybrid) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "hybridType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"hybridType\": ")
	if tmp, err := json.Marshal(strct.HybridType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maternalOrganismId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maternalOrganismId\": ")
	if tmp, err := json.Marshal(strct.MaternalOrganismId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "maternalOrganismName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"maternalOrganismName\": ")
	if tmp, err := json.Marshal(strct.MaternalOrganismName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "paternalOrganismId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"paternalOrganismId\": ")
	if tmp, err := json.Marshal(strct.PaternalOrganismId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "paternalOrganismName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"paternalOrganismName\": ")
	if tmp, err := json.Marshal(strct.PaternalOrganismName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SubstanceSourceMaterialHybrid) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "hybridType":
            if err := json.Unmarshal([]byte(v), &strct.HybridType); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "maternalOrganismId":
            if err := json.Unmarshal([]byte(v), &strct.MaternalOrganismId); err != nil {
                return err
             }
        case "maternalOrganismName":
            if err := json.Unmarshal([]byte(v), &strct.MaternalOrganismName); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "paternalOrganismId":
            if err := json.Unmarshal([]byte(v), &strct.PaternalOrganismId); err != nil {
                return err
             }
        case "paternalOrganismName":
            if err := json.Unmarshal([]byte(v), &strct.PaternalOrganismName); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
