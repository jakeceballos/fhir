// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// MedicationKnowledge Information about a medication that is used to support knowledge.
type MedicationKnowledge struct {

  // Guidelines for the administration of the medication.
  AdministrationGuidelines []*MedicationKnowledgeAdministrationGuidelines `json:"administrationGuidelines,omitempty"`

  // Specific amount of the drug in the packaged product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).
  Amount *Quantity `json:"amount,omitempty"`

  // Associated or related medications.  For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor).
  AssociatedMedication []*Reference `json:"associatedMedication,omitempty"`

  // A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.
  Code *CodeableConcept `json:"code,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).
  Contraindication []*Reference `json:"contraindication,omitempty"`

  // The price of the medication.
  Cost []*MedicationKnowledgeCost `json:"cost,omitempty"`

  // Describes the form of the item.  Powder; tablets; capsule.
  DoseForm *CodeableConcept `json:"doseForm,omitempty"`

  // Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.
  DrugCharacteristic []*MedicationKnowledgeDrugCharacteristic `json:"drugCharacteristic,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // Identifies a particular constituent of interest in the product.
  Ingredient []*MedicationKnowledgeIngredient `json:"ingredient,omitempty"`

  // The intended or approved route of administration.
  IntendedRoute []*CodeableConcept `json:"intendedRoute,omitempty"`

  // The time course of drug absorption, distribution, metabolism and excretion of a medication from the body.
  Kinetics []*MedicationKnowledgeKinetics `json:"kinetics,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // Describes the details of the manufacturer of the medication product.  This is not intended to represent the distributor of a medication product.
  Manufacturer *Reference `json:"manufacturer,omitempty"`

  // Categorization of the medication within a formulary or classification system.
  MedicineClassification []*MedicationKnowledgeMedicineClassification `json:"medicineClassification,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The program under which the medication is reviewed.
  MonitoringProgram []*MedicationKnowledgeMonitoringProgram `json:"monitoringProgram,omitempty"`

  // Associated documentation about the medication.
  Monograph []*MedicationKnowledgeMonograph `json:"monograph,omitempty"`

  // Information that only applies to packages (not products).
  Packaging *MedicationKnowledgePackaging `json:"packaging,omitempty"`

  // The instructions for preparing the medication.
  PreparationInstruction string `json:"preparationInstruction,omitempty"`

  // Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).
  ProductType []*CodeableConcept `json:"productType,omitempty"`

  // Regulatory information about a medication.
  Regulatory []*MedicationKnowledgeRegulatory `json:"regulatory,omitempty"`

  // Associated or related knowledge about a medication.
  RelatedMedicationKnowledge []*MedicationKnowledgeRelatedMedicationKnowledge `json:"relatedMedicationKnowledge,omitempty"`

  // This is a MedicationKnowledge resource
  ResourceType interface{} `json:"resourceType"`

  // A code to indicate if the medication is in active use.  The status refers to the validity about the information of the medication and not to its medicinal properties.
  Status string `json:"status,omitempty"`

  // Additional names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.
  Synonym []string `json:"synonym,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`
}

func (strct *MedicationKnowledge) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "administrationGuidelines" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"administrationGuidelines\": ")
	if tmp, err := json.Marshal(strct.AdministrationGuidelines); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "amount" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"amount\": ")
	if tmp, err := json.Marshal(strct.Amount); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "associatedMedication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"associatedMedication\": ")
	if tmp, err := json.Marshal(strct.AssociatedMedication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contraindication" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contraindication\": ")
	if tmp, err := json.Marshal(strct.Contraindication); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "cost" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"cost\": ")
	if tmp, err := json.Marshal(strct.Cost); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doseForm" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doseForm\": ")
	if tmp, err := json.Marshal(strct.DoseForm); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "drugCharacteristic" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"drugCharacteristic\": ")
	if tmp, err := json.Marshal(strct.DrugCharacteristic); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "ingredient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"ingredient\": ")
	if tmp, err := json.Marshal(strct.Ingredient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "intendedRoute" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"intendedRoute\": ")
	if tmp, err := json.Marshal(strct.IntendedRoute); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "kinetics" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"kinetics\": ")
	if tmp, err := json.Marshal(strct.Kinetics); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "manufacturer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"manufacturer\": ")
	if tmp, err := json.Marshal(strct.Manufacturer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "medicineClassification" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"medicineClassification\": ")
	if tmp, err := json.Marshal(strct.MedicineClassification); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "monitoringProgram" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"monitoringProgram\": ")
	if tmp, err := json.Marshal(strct.MonitoringProgram); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "monograph" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"monograph\": ")
	if tmp, err := json.Marshal(strct.Monograph); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "packaging" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"packaging\": ")
	if tmp, err := json.Marshal(strct.Packaging); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "preparationInstruction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"preparationInstruction\": ")
	if tmp, err := json.Marshal(strct.PreparationInstruction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productType\": ")
	if tmp, err := json.Marshal(strct.ProductType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "regulatory" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"regulatory\": ")
	if tmp, err := json.Marshal(strct.Regulatory); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "relatedMedicationKnowledge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"relatedMedicationKnowledge\": ")
	if tmp, err := json.Marshal(strct.RelatedMedicationKnowledge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "synonym" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"synonym\": ")
	if tmp, err := json.Marshal(strct.Synonym); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MedicationKnowledge) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "administrationGuidelines":
            if err := json.Unmarshal([]byte(v), &strct.AdministrationGuidelines); err != nil {
                return err
             }
        case "amount":
            if err := json.Unmarshal([]byte(v), &strct.Amount); err != nil {
                return err
             }
        case "associatedMedication":
            if err := json.Unmarshal([]byte(v), &strct.AssociatedMedication); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "contraindication":
            if err := json.Unmarshal([]byte(v), &strct.Contraindication); err != nil {
                return err
             }
        case "cost":
            if err := json.Unmarshal([]byte(v), &strct.Cost); err != nil {
                return err
             }
        case "doseForm":
            if err := json.Unmarshal([]byte(v), &strct.DoseForm); err != nil {
                return err
             }
        case "drugCharacteristic":
            if err := json.Unmarshal([]byte(v), &strct.DrugCharacteristic); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "ingredient":
            if err := json.Unmarshal([]byte(v), &strct.Ingredient); err != nil {
                return err
             }
        case "intendedRoute":
            if err := json.Unmarshal([]byte(v), &strct.IntendedRoute); err != nil {
                return err
             }
        case "kinetics":
            if err := json.Unmarshal([]byte(v), &strct.Kinetics); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "manufacturer":
            if err := json.Unmarshal([]byte(v), &strct.Manufacturer); err != nil {
                return err
             }
        case "medicineClassification":
            if err := json.Unmarshal([]byte(v), &strct.MedicineClassification); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "monitoringProgram":
            if err := json.Unmarshal([]byte(v), &strct.MonitoringProgram); err != nil {
                return err
             }
        case "monograph":
            if err := json.Unmarshal([]byte(v), &strct.Monograph); err != nil {
                return err
             }
        case "packaging":
            if err := json.Unmarshal([]byte(v), &strct.Packaging); err != nil {
                return err
             }
        case "preparationInstruction":
            if err := json.Unmarshal([]byte(v), &strct.PreparationInstruction); err != nil {
                return err
             }
        case "productType":
            if err := json.Unmarshal([]byte(v), &strct.ProductType); err != nil {
                return err
             }
        case "regulatory":
            if err := json.Unmarshal([]byte(v), &strct.Regulatory); err != nil {
                return err
             }
        case "relatedMedicationKnowledge":
            if err := json.Unmarshal([]byte(v), &strct.RelatedMedicationKnowledge); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "synonym":
            if err := json.Unmarshal([]byte(v), &strct.Synonym); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
