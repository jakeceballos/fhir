// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// ChargeItem The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
type ChargeItem struct {

  // Account into which this ChargeItems belongs.
  Account []*Reference `json:"account,omitempty"`

  // The anatomical location where the related service has been applied.
  Bodysite []*CodeableConcept `json:"bodysite,omitempty"`

  // A code that identifies the charge, like a billing code.
  Code *CodeableConcept `json:"code"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The encounter or episode of care that establishes the context for this event.
  Context *Reference `json:"context,omitempty"`

  // The financial cost center permits the tracking of charge attribution.
  CostCenter *Reference `json:"costCenter,omitempty"`

  // References the source of pricing information, rules of application for the code this ChargeItem uses.
  DefinitionCanonical []string `json:"definitionCanonical,omitempty"`

  // References the (external) source of pricing information, rules of application for the code this ChargeItem uses.
  DefinitionUri []string `json:"definitionUri,omitempty"`

  // Date the charge item was entered.
  EnteredDate string `json:"enteredDate,omitempty"`

  // The device, practitioner, etc. who entered the charge item.
  Enterer *Reference `json:"enterer,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Factor overriding the factor determined by the rules associated with the code.
  FactorOverride float64 `json:"factorOverride,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Identifiers assigned to this event performer or other systems.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Comments made about the event by the performer, subject or other participants.
  Note []*Annotation `json:"note,omitempty"`

  // Date/time(s) or duration when the charged service was applied.
  OccurrenceDateTime string `json:"occurrenceDateTime,omitempty"`

  // Date/time(s) or duration when the charged service was applied.
  OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`

  // Date/time(s) or duration when the charged service was applied.
  OccurrenceTiming *Timing `json:"occurrenceTiming,omitempty"`

  // If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.
  OverrideReason string `json:"overrideReason,omitempty"`

  // ChargeItems can be grouped to larger ChargeItems covering the whole set.
  PartOf []*Reference `json:"partOf,omitempty"`

  // Indicates who or what performed or participated in the charged service.
  Performer []*ChargeItemPerformer `json:"performer,omitempty"`

  // The organization requesting the service.
  PerformingOrganization *Reference `json:"performingOrganization,omitempty"`

  // Total price of the charge overriding the list price associated with the code.
  PriceOverride *Money `json:"priceOverride,omitempty"`

  // Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
  ProductCodeableConcept *CodeableConcept `json:"productCodeableConcept,omitempty"`

  // Identifies the device, food, drug or other product being charged either by type code or reference to an instance.
  ProductReference *Reference `json:"productReference,omitempty"`

  // Quantity of which the charge item has been serviced.
  Quantity *Quantity `json:"quantity,omitempty"`

  // Describes why the event occurred in coded or textual form.
  Reason []*CodeableConcept `json:"reason,omitempty"`

  // The organization performing the service.
  RequestingOrganization *Reference `json:"requestingOrganization,omitempty"`

  // This is a ChargeItem resource
  ResourceType interface{} `json:"resourceType"`

  // Indicated the rendered service that caused this charge.
  Service []*Reference `json:"service,omitempty"`

  // The current state of the ChargeItem.
  Status interface{} `json:"status,omitempty"`

  // The individual or set of individuals the action is being or was performed on.
  Subject *Reference `json:"subject"`

  // Further information supporting this charge.
  SupportingInformation []*Reference `json:"supportingInformation,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`
}

func (strct *ChargeItem) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "account" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"account\": ")
	if tmp, err := json.Marshal(strct.Account); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "bodysite" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bodysite\": ")
	if tmp, err := json.Marshal(strct.Bodysite); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Code" field is required
    if strct.Code == nil {
        return nil, errors.New("code is a required field")
    }
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "context" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"context\": ")
	if tmp, err := json.Marshal(strct.Context); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "costCenter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"costCenter\": ")
	if tmp, err := json.Marshal(strct.CostCenter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "definitionCanonical" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"definitionCanonical\": ")
	if tmp, err := json.Marshal(strct.DefinitionCanonical); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "definitionUri" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"definitionUri\": ")
	if tmp, err := json.Marshal(strct.DefinitionUri); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "enteredDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"enteredDate\": ")
	if tmp, err := json.Marshal(strct.EnteredDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "enterer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"enterer\": ")
	if tmp, err := json.Marshal(strct.Enterer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "factorOverride" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"factorOverride\": ")
	if tmp, err := json.Marshal(strct.FactorOverride); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceDateTime\": ")
	if tmp, err := json.Marshal(strct.OccurrenceDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrencePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrencePeriod\": ")
	if tmp, err := json.Marshal(strct.OccurrencePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceTiming\": ")
	if tmp, err := json.Marshal(strct.OccurrenceTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "overrideReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"overrideReason\": ")
	if tmp, err := json.Marshal(strct.OverrideReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "partOf" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"partOf\": ")
	if tmp, err := json.Marshal(strct.PartOf); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performer\": ")
	if tmp, err := json.Marshal(strct.Performer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performingOrganization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performingOrganization\": ")
	if tmp, err := json.Marshal(strct.PerformingOrganization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "priceOverride" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"priceOverride\": ")
	if tmp, err := json.Marshal(strct.PriceOverride); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.ProductCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "productReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"productReference\": ")
	if tmp, err := json.Marshal(strct.ProductReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quantity\": ")
	if tmp, err := json.Marshal(strct.Quantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reason\": ")
	if tmp, err := json.Marshal(strct.Reason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestingOrganization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestingOrganization\": ")
	if tmp, err := json.Marshal(strct.RequestingOrganization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "service" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"service\": ")
	if tmp, err := json.Marshal(strct.Service); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Subject" field is required
    if strct.Subject == nil {
        return nil, errors.New("subject is a required field")
    }
    // Marshal the "subject" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subject\": ")
	if tmp, err := json.Marshal(strct.Subject); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "supportingInformation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"supportingInformation\": ")
	if tmp, err := json.Marshal(strct.SupportingInformation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ChargeItem) UnmarshalJSON(b []byte) error {
    codeReceived := false
    resourceTypeReceived := false
    subjectReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "account":
            if err := json.Unmarshal([]byte(v), &strct.Account); err != nil {
                return err
             }
        case "bodysite":
            if err := json.Unmarshal([]byte(v), &strct.Bodysite); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
            codeReceived = true
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "context":
            if err := json.Unmarshal([]byte(v), &strct.Context); err != nil {
                return err
             }
        case "costCenter":
            if err := json.Unmarshal([]byte(v), &strct.CostCenter); err != nil {
                return err
             }
        case "definitionCanonical":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionCanonical); err != nil {
                return err
             }
        case "definitionUri":
            if err := json.Unmarshal([]byte(v), &strct.DefinitionUri); err != nil {
                return err
             }
        case "enteredDate":
            if err := json.Unmarshal([]byte(v), &strct.EnteredDate); err != nil {
                return err
             }
        case "enterer":
            if err := json.Unmarshal([]byte(v), &strct.Enterer); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "factorOverride":
            if err := json.Unmarshal([]byte(v), &strct.FactorOverride); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "occurrenceDateTime":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceDateTime); err != nil {
                return err
             }
        case "occurrencePeriod":
            if err := json.Unmarshal([]byte(v), &strct.OccurrencePeriod); err != nil {
                return err
             }
        case "occurrenceTiming":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceTiming); err != nil {
                return err
             }
        case "overrideReason":
            if err := json.Unmarshal([]byte(v), &strct.OverrideReason); err != nil {
                return err
             }
        case "partOf":
            if err := json.Unmarshal([]byte(v), &strct.PartOf); err != nil {
                return err
             }
        case "performer":
            if err := json.Unmarshal([]byte(v), &strct.Performer); err != nil {
                return err
             }
        case "performingOrganization":
            if err := json.Unmarshal([]byte(v), &strct.PerformingOrganization); err != nil {
                return err
             }
        case "priceOverride":
            if err := json.Unmarshal([]byte(v), &strct.PriceOverride); err != nil {
                return err
             }
        case "productCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.ProductCodeableConcept); err != nil {
                return err
             }
        case "productReference":
            if err := json.Unmarshal([]byte(v), &strct.ProductReference); err != nil {
                return err
             }
        case "quantity":
            if err := json.Unmarshal([]byte(v), &strct.Quantity); err != nil {
                return err
             }
        case "reason":
            if err := json.Unmarshal([]byte(v), &strct.Reason); err != nil {
                return err
             }
        case "requestingOrganization":
            if err := json.Unmarshal([]byte(v), &strct.RequestingOrganization); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "service":
            if err := json.Unmarshal([]byte(v), &strct.Service); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "subject":
            if err := json.Unmarshal([]byte(v), &strct.Subject); err != nil {
                return err
             }
            subjectReceived = true
        case "supportingInformation":
            if err := json.Unmarshal([]byte(v), &strct.SupportingInformation); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if code (a required property) was received
    if !codeReceived {
        return errors.New("\"code\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    // check if subject (a required property) was received
    if !subjectReceived {
        return errors.New("\"subject\" is required but was not present")
    }
    return nil
}
