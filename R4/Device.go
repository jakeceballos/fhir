// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// Device A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
type Device struct {

  // Contact details for an organization or a particular human that is responsible for the device.
  Contact []*ContactPoint `json:"contact,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The reference to the definition for the device.
  Definition *Reference `json:"definition,omitempty"`

  // This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
  DeviceName []*DeviceDeviceName `json:"deviceName,omitempty"`

  // The distinct identification string as required by regulation for a human cell, tissue, or cellular and tissue-based product.
  DistinctIdentifier string `json:"distinctIdentifier,omitempty"`

  // The date and time beyond which this device is no longer valid or should not be used (if applicable).
  ExpirationDate string `json:"expirationDate,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The place where the device can be found.
  Location *Reference `json:"location,omitempty"`

  // Lot number assigned by the manufacturer.
  LotNumber string `json:"lotNumber,omitempty"`

  // The date and time when the device was manufactured.
  ManufactureDate string `json:"manufactureDate,omitempty"`

  // A name of the manufacturer.
  Manufacturer string `json:"manufacturer,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // The model number for the device.
  ModelNumber string `json:"modelNumber,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Descriptive information, usage information or implantation information that is not captured in an existing element.
  Note []*Annotation `json:"note,omitempty"`

  // An organization that is responsible for the provision and ongoing maintenance of the device.
  Owner *Reference `json:"owner,omitempty"`

  // The parent device.
  Parent *Reference `json:"parent,omitempty"`

  // The part number of the device.
  PartNumber string `json:"partNumber,omitempty"`

  // Patient information, If the device is affixed to a person.
  Patient *Reference `json:"patient,omitempty"`

  // The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
  Property []*DeviceProperty `json:"property,omitempty"`

  // This is a Device resource
  ResourceType interface{} `json:"resourceType"`

  // Provides additional safety characteristics about a medical device.  For example devices containing latex.
  Safety []*CodeableConcept `json:"safety,omitempty"`

  // The serial number assigned by the organization when the device was manufactured.
  SerialNumber string `json:"serialNumber,omitempty"`

  // The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
  Specialization []*DeviceSpecialization `json:"specialization,omitempty"`

  // Status of the Device availability.
  Status interface{} `json:"status,omitempty"`

  // Reason for the dtatus of the Device availability.
  StatusReason []*CodeableConcept `json:"statusReason,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The kind or type of device.
  Type *CodeableConcept `json:"type,omitempty"`

  // Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
  UdiCarrier []*DeviceUdiCarrier `json:"udiCarrier,omitempty"`

  // A network address on which the device may be contacted directly.
  Url string `json:"url,omitempty"`

  // The actual design of the device or software version running on the device.
  Version []*DeviceVersion `json:"version,omitempty"`
}

func (strct *Device) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "contact" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contact\": ")
	if tmp, err := json.Marshal(strct.Contact); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "definition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"definition\": ")
	if tmp, err := json.Marshal(strct.Definition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "deviceName" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"deviceName\": ")
	if tmp, err := json.Marshal(strct.DeviceName); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "distinctIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"distinctIdentifier\": ")
	if tmp, err := json.Marshal(strct.DistinctIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "expirationDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"expirationDate\": ")
	if tmp, err := json.Marshal(strct.ExpirationDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"location\": ")
	if tmp, err := json.Marshal(strct.Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lotNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lotNumber\": ")
	if tmp, err := json.Marshal(strct.LotNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "manufactureDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"manufactureDate\": ")
	if tmp, err := json.Marshal(strct.ManufactureDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "manufacturer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"manufacturer\": ")
	if tmp, err := json.Marshal(strct.Manufacturer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modelNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modelNumber\": ")
	if tmp, err := json.Marshal(strct.ModelNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "owner" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"owner\": ")
	if tmp, err := json.Marshal(strct.Owner); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "parent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"parent\": ")
	if tmp, err := json.Marshal(strct.Parent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "partNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"partNumber\": ")
	if tmp, err := json.Marshal(strct.PartNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "patient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patient\": ")
	if tmp, err := json.Marshal(strct.Patient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "property" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"property\": ")
	if tmp, err := json.Marshal(strct.Property); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "safety" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"safety\": ")
	if tmp, err := json.Marshal(strct.Safety); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "serialNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"serialNumber\": ")
	if tmp, err := json.Marshal(strct.SerialNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specialization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specialization\": ")
	if tmp, err := json.Marshal(strct.Specialization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "statusReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statusReason\": ")
	if tmp, err := json.Marshal(strct.StatusReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "udiCarrier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"udiCarrier\": ")
	if tmp, err := json.Marshal(strct.UdiCarrier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "version" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"version\": ")
	if tmp, err := json.Marshal(strct.Version); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Device) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "contact":
            if err := json.Unmarshal([]byte(v), &strct.Contact); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "definition":
            if err := json.Unmarshal([]byte(v), &strct.Definition); err != nil {
                return err
             }
        case "deviceName":
            if err := json.Unmarshal([]byte(v), &strct.DeviceName); err != nil {
                return err
             }
        case "distinctIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.DistinctIdentifier); err != nil {
                return err
             }
        case "expirationDate":
            if err := json.Unmarshal([]byte(v), &strct.ExpirationDate); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "location":
            if err := json.Unmarshal([]byte(v), &strct.Location); err != nil {
                return err
             }
        case "lotNumber":
            if err := json.Unmarshal([]byte(v), &strct.LotNumber); err != nil {
                return err
             }
        case "manufactureDate":
            if err := json.Unmarshal([]byte(v), &strct.ManufactureDate); err != nil {
                return err
             }
        case "manufacturer":
            if err := json.Unmarshal([]byte(v), &strct.Manufacturer); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modelNumber":
            if err := json.Unmarshal([]byte(v), &strct.ModelNumber); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "owner":
            if err := json.Unmarshal([]byte(v), &strct.Owner); err != nil {
                return err
             }
        case "parent":
            if err := json.Unmarshal([]byte(v), &strct.Parent); err != nil {
                return err
             }
        case "partNumber":
            if err := json.Unmarshal([]byte(v), &strct.PartNumber); err != nil {
                return err
             }
        case "patient":
            if err := json.Unmarshal([]byte(v), &strct.Patient); err != nil {
                return err
             }
        case "property":
            if err := json.Unmarshal([]byte(v), &strct.Property); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "safety":
            if err := json.Unmarshal([]byte(v), &strct.Safety); err != nil {
                return err
             }
        case "serialNumber":
            if err := json.Unmarshal([]byte(v), &strct.SerialNumber); err != nil {
                return err
             }
        case "specialization":
            if err := json.Unmarshal([]byte(v), &strct.Specialization); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "statusReason":
            if err := json.Unmarshal([]byte(v), &strct.StatusReason); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "udiCarrier":
            if err := json.Unmarshal([]byte(v), &strct.UdiCarrier); err != nil {
                return err
             }
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        case "version":
            if err := json.Unmarshal([]byte(v), &strct.Version); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
