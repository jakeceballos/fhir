// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// ClaimInsurance A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type ClaimInsurance struct {

  // A business agreement number established between the provider and the insurer for special business processing purposes.
  BusinessArrangement string `json:"businessArrangement,omitempty"`

  // The result of the adjudication of the line items for the Coverage specified in this insurance.
  ClaimResponse *Reference `json:"claimResponse,omitempty"`

  // Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
  Coverage *Reference `json:"coverage"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
  Focal bool `json:"focal,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // The business identifier to be used when the claim is sent for adjudication against this insurance policy.
  Identifier *Identifier `json:"identifier,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.
  PreAuthRef []string `json:"preAuthRef,omitempty"`

  // A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
  Sequence float64 `json:"sequence,omitempty"`
}

func (strct *ClaimInsurance) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "businessArrangement" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"businessArrangement\": ")
	if tmp, err := json.Marshal(strct.BusinessArrangement); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "claimResponse" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"claimResponse\": ")
	if tmp, err := json.Marshal(strct.ClaimResponse); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Coverage" field is required
    if strct.Coverage == nil {
        return nil, errors.New("coverage is a required field")
    }
    // Marshal the "coverage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"coverage\": ")
	if tmp, err := json.Marshal(strct.Coverage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "focal" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"focal\": ")
	if tmp, err := json.Marshal(strct.Focal); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "preAuthRef" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"preAuthRef\": ")
	if tmp, err := json.Marshal(strct.PreAuthRef); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sequence" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sequence\": ")
	if tmp, err := json.Marshal(strct.Sequence); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ClaimInsurance) UnmarshalJSON(b []byte) error {
    coverageReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "businessArrangement":
            if err := json.Unmarshal([]byte(v), &strct.BusinessArrangement); err != nil {
                return err
             }
        case "claimResponse":
            if err := json.Unmarshal([]byte(v), &strct.ClaimResponse); err != nil {
                return err
             }
        case "coverage":
            if err := json.Unmarshal([]byte(v), &strct.Coverage); err != nil {
                return err
             }
            coverageReceived = true
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "focal":
            if err := json.Unmarshal([]byte(v), &strct.Focal); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "preAuthRef":
            if err := json.Unmarshal([]byte(v), &strct.PreAuthRef); err != nil {
                return err
             }
        case "sequence":
            if err := json.Unmarshal([]byte(v), &strct.Sequence); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if coverage (a required property) was received
    if !coverageReceived {
        return errors.New("\"coverage\" is required but was not present")
    }
    return nil
}
