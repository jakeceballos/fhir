// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// ContractTerm Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractTerm struct {

  // An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.
  Action []*ContractAction `json:"action,omitempty"`

  // Relevant time or time-period when this Contract Provision is applicable.
  Applies *Period `json:"applies,omitempty"`

  // Contract Term Asset List.
  Asset []*ContractAsset `json:"asset,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Nested group of Contract Provisions.
  Group []*ContractTerm `json:"group,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // Unique identifier for this particular Contract Provision.
  Identifier *Identifier `json:"identifier,omitempty"`

  // When this Contract Provision was issued.
  Issued string `json:"issued,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The matter of concern in the context of this provision of the agrement.
  Offer *ContractOffer `json:"offer"`

  // Security labels that protect the handling of information about the term and its elements, which may be specifically identified..
  SecurityLabel []*ContractSecurityLabel `json:"securityLabel,omitempty"`

  // A specialized legal clause or condition based on overarching contract type.
  SubType *CodeableConcept `json:"subType,omitempty"`

  // Statement of a provision in a policy or a contract.
  Text string `json:"text,omitempty"`

  // The entity that the term applies to.
  TopicCodeableConcept *CodeableConcept `json:"topicCodeableConcept,omitempty"`

  // The entity that the term applies to.
  TopicReference *Reference `json:"topicReference,omitempty"`

  // A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.
  Type *CodeableConcept `json:"type,omitempty"`
}

func (strct *ContractTerm) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "applies" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"applies\": ")
	if tmp, err := json.Marshal(strct.Applies); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "asset" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"asset\": ")
	if tmp, err := json.Marshal(strct.Asset); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "group" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"group\": ")
	if tmp, err := json.Marshal(strct.Group); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "issued" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"issued\": ")
	if tmp, err := json.Marshal(strct.Issued); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Offer" field is required
    if strct.Offer == nil {
        return nil, errors.New("offer is a required field")
    }
    // Marshal the "offer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"offer\": ")
	if tmp, err := json.Marshal(strct.Offer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "securityLabel" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"securityLabel\": ")
	if tmp, err := json.Marshal(strct.SecurityLabel); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subType\": ")
	if tmp, err := json.Marshal(strct.SubType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "topicCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"topicCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.TopicCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "topicReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"topicReference\": ")
	if tmp, err := json.Marshal(strct.TopicReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ContractTerm) UnmarshalJSON(b []byte) error {
    offerReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
        case "applies":
            if err := json.Unmarshal([]byte(v), &strct.Applies); err != nil {
                return err
             }
        case "asset":
            if err := json.Unmarshal([]byte(v), &strct.Asset); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "group":
            if err := json.Unmarshal([]byte(v), &strct.Group); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "issued":
            if err := json.Unmarshal([]byte(v), &strct.Issued); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "offer":
            if err := json.Unmarshal([]byte(v), &strct.Offer); err != nil {
                return err
             }
            offerReceived = true
        case "securityLabel":
            if err := json.Unmarshal([]byte(v), &strct.SecurityLabel); err != nil {
                return err
             }
        case "subType":
            if err := json.Unmarshal([]byte(v), &strct.SubType); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "topicCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.TopicCodeableConcept); err != nil {
                return err
             }
        case "topicReference":
            if err := json.Unmarshal([]byte(v), &strct.TopicReference); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if offer (a required property) was received
    if !offerReceived {
        return errors.New("\"offer\" is required but was not present")
    }
    return nil
}
