// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Coverage Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
type Coverage struct {

  // The party who benefits from the insurance coverage; the patient when products and/or services are provided.
  Beneficiary *Reference `json:"beneficiary"`

  // A suite of underwriter specific classifiers.
  Class []*CoverageClass `json:"class,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The policy(s) which constitute this insurance coverage.
  Contract []*Reference `json:"contract,omitempty"`

  // A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.
  CostToBeneficiary []*CoverageCostToBeneficiary `json:"costToBeneficiary,omitempty"`

  // A unique identifier for a dependent under the coverage.
  Dependent string `json:"dependent,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A unique identifier assigned to this coverage.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.
  Network string `json:"network,omitempty"`

  // The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care.
  Order float64 `json:"order,omitempty"`

  // The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.
  Payor []*Reference `json:"payor"`

  // Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.
  Period *Period `json:"period,omitempty"`

  // The party who 'owns' the insurance policy.
  PolicyHolder *Reference `json:"policyHolder,omitempty"`

  // The relationship of beneficiary (patient) to the subscriber.
  Relationship *CodeableConcept `json:"relationship,omitempty"`

  // This is a Coverage resource
  ResourceType interface{} `json:"resourceType"`

  // The status of the resource instance.
  Status string `json:"status,omitempty"`

  // When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.
  Subrogation bool `json:"subrogation,omitempty"`

  // The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.
  Subscriber *Reference `json:"subscriber,omitempty"`

  // The insurer assigned ID for the Subscriber.
  SubscriberId string `json:"subscriberId,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.
  Type *CodeableConcept `json:"type,omitempty"`
}

func (strct *Coverage) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Beneficiary" field is required
    if strct.Beneficiary == nil {
        return nil, errors.New("beneficiary is a required field")
    }
    // Marshal the "beneficiary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"beneficiary\": ")
	if tmp, err := json.Marshal(strct.Beneficiary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "class" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"class\": ")
	if tmp, err := json.Marshal(strct.Class); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contract" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contract\": ")
	if tmp, err := json.Marshal(strct.Contract); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "costToBeneficiary" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"costToBeneficiary\": ")
	if tmp, err := json.Marshal(strct.CostToBeneficiary); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dependent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dependent\": ")
	if tmp, err := json.Marshal(strct.Dependent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "network" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"network\": ")
	if tmp, err := json.Marshal(strct.Network); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "order" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"order\": ")
	if tmp, err := json.Marshal(strct.Order); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Payor" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "payor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"payor\": ")
	if tmp, err := json.Marshal(strct.Payor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "period" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"period\": ")
	if tmp, err := json.Marshal(strct.Period); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "policyHolder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"policyHolder\": ")
	if tmp, err := json.Marshal(strct.PolicyHolder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "relationship" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"relationship\": ")
	if tmp, err := json.Marshal(strct.Relationship); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subrogation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subrogation\": ")
	if tmp, err := json.Marshal(strct.Subrogation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subscriber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscriber\": ")
	if tmp, err := json.Marshal(strct.Subscriber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subscriberId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subscriberId\": ")
	if tmp, err := json.Marshal(strct.SubscriberId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Coverage) UnmarshalJSON(b []byte) error {
    beneficiaryReceived := false
    payorReceived := false
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "beneficiary":
            if err := json.Unmarshal([]byte(v), &strct.Beneficiary); err != nil {
                return err
             }
            beneficiaryReceived = true
        case "class":
            if err := json.Unmarshal([]byte(v), &strct.Class); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "contract":
            if err := json.Unmarshal([]byte(v), &strct.Contract); err != nil {
                return err
             }
        case "costToBeneficiary":
            if err := json.Unmarshal([]byte(v), &strct.CostToBeneficiary); err != nil {
                return err
             }
        case "dependent":
            if err := json.Unmarshal([]byte(v), &strct.Dependent); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "network":
            if err := json.Unmarshal([]byte(v), &strct.Network); err != nil {
                return err
             }
        case "order":
            if err := json.Unmarshal([]byte(v), &strct.Order); err != nil {
                return err
             }
        case "payor":
            if err := json.Unmarshal([]byte(v), &strct.Payor); err != nil {
                return err
             }
            payorReceived = true
        case "period":
            if err := json.Unmarshal([]byte(v), &strct.Period); err != nil {
                return err
             }
        case "policyHolder":
            if err := json.Unmarshal([]byte(v), &strct.PolicyHolder); err != nil {
                return err
             }
        case "relationship":
            if err := json.Unmarshal([]byte(v), &strct.Relationship); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "subrogation":
            if err := json.Unmarshal([]byte(v), &strct.Subrogation); err != nil {
                return err
             }
        case "subscriber":
            if err := json.Unmarshal([]byte(v), &strct.Subscriber); err != nil {
                return err
             }
        case "subscriberId":
            if err := json.Unmarshal([]byte(v), &strct.SubscriberId); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if beneficiary (a required property) was received
    if !beneficiaryReceived {
        return errors.New("\"beneficiary\" is required but was not present")
    }
    // check if payor (a required property) was received
    if !payorReceived {
        return errors.New("\"payor\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
