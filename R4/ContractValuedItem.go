// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// ContractValuedItem Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractValuedItem struct {

  // Indicates the time during which this Contract ValuedItem information is effective.
  EffectiveTime string `json:"effectiveTime,omitempty"`

  // Specific type of Contract Valued Item that may be priced.
  EntityCodeableConcept *CodeableConcept `json:"entityCodeableConcept,omitempty"`

  // Specific type of Contract Valued Item that may be priced.
  EntityReference *Reference `json:"entityReference,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
  Factor float64 `json:"factor,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // Identifies a Contract Valued Item instance.
  Identifier *Identifier `json:"identifier,omitempty"`

  // Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.
  LinkId []string `json:"linkId,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.
  Net *Money `json:"net,omitempty"`

  // Terms of valuation.
  Payment string `json:"payment,omitempty"`

  // When payment is due.
  PaymentDate string `json:"paymentDate,omitempty"`

  // An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.
  Points float64 `json:"points,omitempty"`

  // Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.
  Quantity *Quantity `json:"quantity,omitempty"`

  // Who will receive payment.
  Recipient *Reference `json:"recipient,omitempty"`

  // Who will make payment.
  Responsible *Reference `json:"responsible,omitempty"`

  // A set of security labels that define which terms are controlled by this condition.
  SecurityLabelNumber []float64 `json:"securityLabelNumber,omitempty"`

  // A Contract Valued Item unit valuation measure.
  UnitPrice *Money `json:"unitPrice,omitempty"`
}

func (strct *ContractValuedItem) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "effectiveTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"effectiveTime\": ")
	if tmp, err := json.Marshal(strct.EffectiveTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "entityCodeableConcept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"entityCodeableConcept\": ")
	if tmp, err := json.Marshal(strct.EntityCodeableConcept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "entityReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"entityReference\": ")
	if tmp, err := json.Marshal(strct.EntityReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "factor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"factor\": ")
	if tmp, err := json.Marshal(strct.Factor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "linkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"linkId\": ")
	if tmp, err := json.Marshal(strct.LinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "net" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"net\": ")
	if tmp, err := json.Marshal(strct.Net); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "payment" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"payment\": ")
	if tmp, err := json.Marshal(strct.Payment); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "paymentDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"paymentDate\": ")
	if tmp, err := json.Marshal(strct.PaymentDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "points" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"points\": ")
	if tmp, err := json.Marshal(strct.Points); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quantity\": ")
	if tmp, err := json.Marshal(strct.Quantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "recipient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"recipient\": ")
	if tmp, err := json.Marshal(strct.Recipient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "responsible" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"responsible\": ")
	if tmp, err := json.Marshal(strct.Responsible); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "securityLabelNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"securityLabelNumber\": ")
	if tmp, err := json.Marshal(strct.SecurityLabelNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "unitPrice" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"unitPrice\": ")
	if tmp, err := json.Marshal(strct.UnitPrice); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ContractValuedItem) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "effectiveTime":
            if err := json.Unmarshal([]byte(v), &strct.EffectiveTime); err != nil {
                return err
             }
        case "entityCodeableConcept":
            if err := json.Unmarshal([]byte(v), &strct.EntityCodeableConcept); err != nil {
                return err
             }
        case "entityReference":
            if err := json.Unmarshal([]byte(v), &strct.EntityReference); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "factor":
            if err := json.Unmarshal([]byte(v), &strct.Factor); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "linkId":
            if err := json.Unmarshal([]byte(v), &strct.LinkId); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "net":
            if err := json.Unmarshal([]byte(v), &strct.Net); err != nil {
                return err
             }
        case "payment":
            if err := json.Unmarshal([]byte(v), &strct.Payment); err != nil {
                return err
             }
        case "paymentDate":
            if err := json.Unmarshal([]byte(v), &strct.PaymentDate); err != nil {
                return err
             }
        case "points":
            if err := json.Unmarshal([]byte(v), &strct.Points); err != nil {
                return err
             }
        case "quantity":
            if err := json.Unmarshal([]byte(v), &strct.Quantity); err != nil {
                return err
             }
        case "recipient":
            if err := json.Unmarshal([]byte(v), &strct.Recipient); err != nil {
                return err
             }
        case "responsible":
            if err := json.Unmarshal([]byte(v), &strct.Responsible); err != nil {
                return err
             }
        case "securityLabelNumber":
            if err := json.Unmarshal([]byte(v), &strct.SecurityLabelNumber); err != nil {
                return err
             }
        case "unitPrice":
            if err := json.Unmarshal([]byte(v), &strct.UnitPrice); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
