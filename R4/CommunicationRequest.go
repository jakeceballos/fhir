// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "errors"
    "bytes"
)

// CommunicationRequest A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
type CommunicationRequest struct {

  // Other resources that pertain to this communication request and to which this communication request should be associated.
  About []*Reference `json:"about,omitempty"`

  // For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.
  AuthoredOn string `json:"authoredOn,omitempty"`

  // A plan or proposal that is fulfilled in whole or in part by this request.
  BasedOn []*Reference `json:"basedOn,omitempty"`

  // The type of message to be sent such as alert, notification, reminder, instruction, etc.
  Category []*CodeableConcept `json:"category,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.
  DoNotPerform bool `json:"doNotPerform,omitempty"`

  // The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.
  Encounter *Reference `json:"encounter,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // A shared identifier common to all requests that were authorized more or less simultaneously by a single author, representing the identifier of the requisition, prescription or similar form.
  GroupIdentifier *Identifier `json:"groupIdentifier,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // A channel that was used for this communication (e.g. email, fax).
  Medium []*CodeableConcept `json:"medium,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Comments made about the request by the requester, sender, recipient, subject or other participants.
  Note []*Annotation `json:"note,omitempty"`

  // The time when this communication is to occur.
  OccurrenceDateTime string `json:"occurrenceDateTime,omitempty"`

  // The time when this communication is to occur.
  OccurrencePeriod *Period `json:"occurrencePeriod,omitempty"`

  // Text, attachment(s), or resource(s) to be communicated to the recipient.
  Payload []*CommunicationRequestPayload `json:"payload,omitempty"`

  // Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.
  Priority string `json:"priority,omitempty"`

  // Describes why the request is being made in coded or textual form.
  ReasonCode []*CodeableConcept `json:"reasonCode,omitempty"`

  // Indicates another resource whose existence justifies this request.
  ReasonReference []*Reference `json:"reasonReference,omitempty"`

  // The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.
  Recipient []*Reference `json:"recipient,omitempty"`

  // Completed or terminated request(s) whose function is taken by this new request.
  Replaces []*Reference `json:"replaces,omitempty"`

  // The device, individual, or organization who initiated the request and has responsibility for its activation.
  Requester *Reference `json:"requester,omitempty"`

  // This is a CommunicationRequest resource
  ResourceType interface{} `json:"resourceType"`

  // The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.
  Sender *Reference `json:"sender,omitempty"`

  // The status of the proposal or order.
  Status string `json:"status,omitempty"`

  // Captures the reason for the current state of the CommunicationRequest.
  StatusReason *CodeableConcept `json:"statusReason,omitempty"`

  // The patient or group that is the focus of this communication request.
  Subject *Reference `json:"subject,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`
}

func (strct *CommunicationRequest) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "about" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"about\": ")
	if tmp, err := json.Marshal(strct.About); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "authoredOn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"authoredOn\": ")
	if tmp, err := json.Marshal(strct.AuthoredOn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "basedOn" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"basedOn\": ")
	if tmp, err := json.Marshal(strct.BasedOn); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "category" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"category\": ")
	if tmp, err := json.Marshal(strct.Category); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doNotPerform" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doNotPerform\": ")
	if tmp, err := json.Marshal(strct.DoNotPerform); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "encounter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"encounter\": ")
	if tmp, err := json.Marshal(strct.Encounter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "groupIdentifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"groupIdentifier\": ")
	if tmp, err := json.Marshal(strct.GroupIdentifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "medium" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"medium\": ")
	if tmp, err := json.Marshal(strct.Medium); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceDateTime\": ")
	if tmp, err := json.Marshal(strct.OccurrenceDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrencePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrencePeriod\": ")
	if tmp, err := json.Marshal(strct.OccurrencePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "payload" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"payload\": ")
	if tmp, err := json.Marshal(strct.Payload); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonCode\": ")
	if tmp, err := json.Marshal(strct.ReasonCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonReference\": ")
	if tmp, err := json.Marshal(strct.ReasonReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "recipient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"recipient\": ")
	if tmp, err := json.Marshal(strct.Recipient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "replaces" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"replaces\": ")
	if tmp, err := json.Marshal(strct.Replaces); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requester" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requester\": ")
	if tmp, err := json.Marshal(strct.Requester); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sender" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sender\": ")
	if tmp, err := json.Marshal(strct.Sender); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "statusReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statusReason\": ")
	if tmp, err := json.Marshal(strct.StatusReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subject" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subject\": ")
	if tmp, err := json.Marshal(strct.Subject); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CommunicationRequest) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "about":
            if err := json.Unmarshal([]byte(v), &strct.About); err != nil {
                return err
             }
        case "authoredOn":
            if err := json.Unmarshal([]byte(v), &strct.AuthoredOn); err != nil {
                return err
             }
        case "basedOn":
            if err := json.Unmarshal([]byte(v), &strct.BasedOn); err != nil {
                return err
             }
        case "category":
            if err := json.Unmarshal([]byte(v), &strct.Category); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "doNotPerform":
            if err := json.Unmarshal([]byte(v), &strct.DoNotPerform); err != nil {
                return err
             }
        case "encounter":
            if err := json.Unmarshal([]byte(v), &strct.Encounter); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "groupIdentifier":
            if err := json.Unmarshal([]byte(v), &strct.GroupIdentifier); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "medium":
            if err := json.Unmarshal([]byte(v), &strct.Medium); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "occurrenceDateTime":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceDateTime); err != nil {
                return err
             }
        case "occurrencePeriod":
            if err := json.Unmarshal([]byte(v), &strct.OccurrencePeriod); err != nil {
                return err
             }
        case "payload":
            if err := json.Unmarshal([]byte(v), &strct.Payload); err != nil {
                return err
             }
        case "priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
        case "reasonCode":
            if err := json.Unmarshal([]byte(v), &strct.ReasonCode); err != nil {
                return err
             }
        case "reasonReference":
            if err := json.Unmarshal([]byte(v), &strct.ReasonReference); err != nil {
                return err
             }
        case "recipient":
            if err := json.Unmarshal([]byte(v), &strct.Recipient); err != nil {
                return err
             }
        case "replaces":
            if err := json.Unmarshal([]byte(v), &strct.Replaces); err != nil {
                return err
             }
        case "requester":
            if err := json.Unmarshal([]byte(v), &strct.Requester); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "sender":
            if err := json.Unmarshal([]byte(v), &strct.Sender); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "statusReason":
            if err := json.Unmarshal([]byte(v), &strct.StatusReason); err != nil {
                return err
             }
        case "subject":
            if err := json.Unmarshal([]byte(v), &strct.Subject); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
