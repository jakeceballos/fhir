// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// CoverageEligibilityResponse This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
type CoverageEligibilityResponse struct {

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The date this resource was created.
  Created string `json:"created,omitempty"`

  // A human readable description of the status of the adjudication.
  Disposition string `json:"disposition,omitempty"`

  // Errors encountered during the processing of the request.
  Error []*CoverageEligibilityResponseError `json:"error,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // A code for the form to be used for printing the content.
  Form *CodeableConcept `json:"form,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A unique identifier assigned to this coverage eligiblity request.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // Financial instruments for reimbursement for the health care products and services.
  Insurance []*CoverageEligibilityResponseInsurance `json:"insurance,omitempty"`

  // The Insurer who issued the coverage in question and is the author of the response.
  Insurer *Reference `json:"insurer"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The outcome of the request processing.
  Outcome interface{} `json:"outcome,omitempty"`

  // The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
  Patient *Reference `json:"patient"`

  // A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
  PreAuthRef string `json:"preAuthRef,omitempty"`

  // Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
  Purpose []interface{} `json:"purpose,omitempty"`

  // Reference to the original request resource.
  Request *Reference `json:"request"`

  // The provider which is responsible for the request.
  Requestor *Reference `json:"requestor,omitempty"`

  // This is a CoverageEligibilityResponse resource
  ResourceType interface{} `json:"resourceType"`

  // The date or dates when the enclosed suite of services were performed or completed.
  ServicedDate string `json:"servicedDate,omitempty"`

  // The date or dates when the enclosed suite of services were performed or completed.
  ServicedPeriod *Period `json:"servicedPeriod,omitempty"`

  // The status of the resource instance.
  Status string `json:"status,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`
}

func (strct *CoverageEligibilityResponse) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "created" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"created\": ")
	if tmp, err := json.Marshal(strct.Created); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "disposition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"disposition\": ")
	if tmp, err := json.Marshal(strct.Disposition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "error" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"error\": ")
	if tmp, err := json.Marshal(strct.Error); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "form" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"form\": ")
	if tmp, err := json.Marshal(strct.Form); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "insurance" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"insurance\": ")
	if tmp, err := json.Marshal(strct.Insurance); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Insurer" field is required
    if strct.Insurer == nil {
        return nil, errors.New("insurer is a required field")
    }
    // Marshal the "insurer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"insurer\": ")
	if tmp, err := json.Marshal(strct.Insurer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "outcome" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"outcome\": ")
	if tmp, err := json.Marshal(strct.Outcome); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Patient" field is required
    if strct.Patient == nil {
        return nil, errors.New("patient is a required field")
    }
    // Marshal the "patient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patient\": ")
	if tmp, err := json.Marshal(strct.Patient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "preAuthRef" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"preAuthRef\": ")
	if tmp, err := json.Marshal(strct.PreAuthRef); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "purpose" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"purpose\": ")
	if tmp, err := json.Marshal(strct.Purpose); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Request" field is required
    if strct.Request == nil {
        return nil, errors.New("request is a required field")
    }
    // Marshal the "request" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"request\": ")
	if tmp, err := json.Marshal(strct.Request); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestor\": ")
	if tmp, err := json.Marshal(strct.Requestor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "servicedDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"servicedDate\": ")
	if tmp, err := json.Marshal(strct.ServicedDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "servicedPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"servicedPeriod\": ")
	if tmp, err := json.Marshal(strct.ServicedPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *CoverageEligibilityResponse) UnmarshalJSON(b []byte) error {
    insurerReceived := false
    patientReceived := false
    requestReceived := false
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "created":
            if err := json.Unmarshal([]byte(v), &strct.Created); err != nil {
                return err
             }
        case "disposition":
            if err := json.Unmarshal([]byte(v), &strct.Disposition); err != nil {
                return err
             }
        case "error":
            if err := json.Unmarshal([]byte(v), &strct.Error); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "form":
            if err := json.Unmarshal([]byte(v), &strct.Form); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "insurance":
            if err := json.Unmarshal([]byte(v), &strct.Insurance); err != nil {
                return err
             }
        case "insurer":
            if err := json.Unmarshal([]byte(v), &strct.Insurer); err != nil {
                return err
             }
            insurerReceived = true
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "outcome":
            if err := json.Unmarshal([]byte(v), &strct.Outcome); err != nil {
                return err
             }
        case "patient":
            if err := json.Unmarshal([]byte(v), &strct.Patient); err != nil {
                return err
             }
            patientReceived = true
        case "preAuthRef":
            if err := json.Unmarshal([]byte(v), &strct.PreAuthRef); err != nil {
                return err
             }
        case "purpose":
            if err := json.Unmarshal([]byte(v), &strct.Purpose); err != nil {
                return err
             }
        case "request":
            if err := json.Unmarshal([]byte(v), &strct.Request); err != nil {
                return err
             }
            requestReceived = true
        case "requestor":
            if err := json.Unmarshal([]byte(v), &strct.Requestor); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "servicedDate":
            if err := json.Unmarshal([]byte(v), &strct.ServicedDate); err != nil {
                return err
             }
        case "servicedPeriod":
            if err := json.Unmarshal([]byte(v), &strct.ServicedPeriod); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if insurer (a required property) was received
    if !insurerReceived {
        return errors.New("\"insurer\" is required but was not present")
    }
    // check if patient (a required property) was received
    if !patientReceived {
        return errors.New("\"patient\" is required but was not present")
    }
    // check if request (a required property) was received
    if !requestReceived {
        return errors.New("\"request\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
