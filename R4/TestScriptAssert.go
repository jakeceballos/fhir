// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "bytes"
)

// TestScriptAssert A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScriptAssert struct {

  // The FHIRPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
  CompareToSourceExpression string `json:"compareToSourceExpression,omitempty"`

  // Id of the source fixture used as the contents to be evaluated by either the "source/expression" or "sourceId/path" definition.
  CompareToSourceId string `json:"compareToSourceId,omitempty"`

  // XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.
  CompareToSourcePath string `json:"compareToSourcePath,omitempty"`

  // The mime-type contents to compare against the request or response message 'Content-Type' header.
  ContentType string `json:"contentType,omitempty"`

  // The description would be used by test engines for tracking and reporting purposes.
  Description string `json:"description,omitempty"`

  // The direction to use for the assertion.
  Direction interface{} `json:"direction,omitempty"`

  // The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.
  Expression string `json:"expression,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The HTTP header field name e.g. 'Location'.
  HeaderField string `json:"headerField,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // The label would be used for tracking/logging purposes by test engines.
  Label string `json:"label,omitempty"`

  // The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.
  MinimumId string `json:"minimumId,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Whether or not the test execution performs validation on the bundle navigation links.
  NavigationLinks bool `json:"navigationLinks,omitempty"`

  // The operator type defines the conditional behavior of the assert. If not defined, the default is equals.
  Operator interface{} `json:"operator,omitempty"`

  // The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.
  Path string `json:"path,omitempty"`

  // The request method or HTTP operation code to compare against that used by the client system under test.
  RequestMethod interface{} `json:"requestMethod,omitempty"`

  // The value to use in a comparison against the request URL path string.
  RequestURL string `json:"requestURL,omitempty"`

  // The type of the resource.  See http://build.fhir.org/resourcelist.html.
  Resource string `json:"resource,omitempty"`

  // okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.
  Response interface{} `json:"response,omitempty"`

  // The value of the HTTP response code to be tested.
  ResponseCode string `json:"responseCode,omitempty"`

  // Fixture to evaluate the XPath/JSONPath expression or the headerField  against.
  SourceId string `json:"sourceId,omitempty"`

  // The ID of the Profile to validate against.
  ValidateProfileId string `json:"validateProfileId,omitempty"`

  // The value to compare to.
  Value string `json:"value,omitempty"`

  // Whether or not the test execution will produce a warning only on error for this assert.
  WarningOnly bool `json:"warningOnly,omitempty"`
}

func (strct *TestScriptAssert) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "compareToSourceExpression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"compareToSourceExpression\": ")
	if tmp, err := json.Marshal(strct.CompareToSourceExpression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "compareToSourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"compareToSourceId\": ")
	if tmp, err := json.Marshal(strct.CompareToSourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "compareToSourcePath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"compareToSourcePath\": ")
	if tmp, err := json.Marshal(strct.CompareToSourcePath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contentType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contentType\": ")
	if tmp, err := json.Marshal(strct.ContentType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "direction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"direction\": ")
	if tmp, err := json.Marshal(strct.Direction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "expression" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"expression\": ")
	if tmp, err := json.Marshal(strct.Expression); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "headerField" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"headerField\": ")
	if tmp, err := json.Marshal(strct.HeaderField); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "label" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"label\": ")
	if tmp, err := json.Marshal(strct.Label); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "minimumId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"minimumId\": ")
	if tmp, err := json.Marshal(strct.MinimumId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "navigationLinks" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"navigationLinks\": ")
	if tmp, err := json.Marshal(strct.NavigationLinks); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "operator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"operator\": ")
	if tmp, err := json.Marshal(strct.Operator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "path" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"path\": ")
	if tmp, err := json.Marshal(strct.Path); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestMethod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestMethod\": ")
	if tmp, err := json.Marshal(strct.RequestMethod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestURL" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestURL\": ")
	if tmp, err := json.Marshal(strct.RequestURL); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resource\": ")
	if tmp, err := json.Marshal(strct.Resource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "response" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"response\": ")
	if tmp, err := json.Marshal(strct.Response); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "responseCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"responseCode\": ")
	if tmp, err := json.Marshal(strct.ResponseCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sourceId\": ")
	if tmp, err := json.Marshal(strct.SourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validateProfileId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validateProfileId\": ")
	if tmp, err := json.Marshal(strct.ValidateProfileId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "value" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"value\": ")
	if tmp, err := json.Marshal(strct.Value); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "warningOnly" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"warningOnly\": ")
	if tmp, err := json.Marshal(strct.WarningOnly); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TestScriptAssert) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "compareToSourceExpression":
            if err := json.Unmarshal([]byte(v), &strct.CompareToSourceExpression); err != nil {
                return err
             }
        case "compareToSourceId":
            if err := json.Unmarshal([]byte(v), &strct.CompareToSourceId); err != nil {
                return err
             }
        case "compareToSourcePath":
            if err := json.Unmarshal([]byte(v), &strct.CompareToSourcePath); err != nil {
                return err
             }
        case "contentType":
            if err := json.Unmarshal([]byte(v), &strct.ContentType); err != nil {
                return err
             }
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "direction":
            if err := json.Unmarshal([]byte(v), &strct.Direction); err != nil {
                return err
             }
        case "expression":
            if err := json.Unmarshal([]byte(v), &strct.Expression); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "headerField":
            if err := json.Unmarshal([]byte(v), &strct.HeaderField); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "label":
            if err := json.Unmarshal([]byte(v), &strct.Label); err != nil {
                return err
             }
        case "minimumId":
            if err := json.Unmarshal([]byte(v), &strct.MinimumId); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "navigationLinks":
            if err := json.Unmarshal([]byte(v), &strct.NavigationLinks); err != nil {
                return err
             }
        case "operator":
            if err := json.Unmarshal([]byte(v), &strct.Operator); err != nil {
                return err
             }
        case "path":
            if err := json.Unmarshal([]byte(v), &strct.Path); err != nil {
                return err
             }
        case "requestMethod":
            if err := json.Unmarshal([]byte(v), &strct.RequestMethod); err != nil {
                return err
             }
        case "requestURL":
            if err := json.Unmarshal([]byte(v), &strct.RequestURL); err != nil {
                return err
             }
        case "resource":
            if err := json.Unmarshal([]byte(v), &strct.Resource); err != nil {
                return err
             }
        case "response":
            if err := json.Unmarshal([]byte(v), &strct.Response); err != nil {
                return err
             }
        case "responseCode":
            if err := json.Unmarshal([]byte(v), &strct.ResponseCode); err != nil {
                return err
             }
        case "sourceId":
            if err := json.Unmarshal([]byte(v), &strct.SourceId); err != nil {
                return err
             }
        case "validateProfileId":
            if err := json.Unmarshal([]byte(v), &strct.ValidateProfileId); err != nil {
                return err
             }
        case "value":
            if err := json.Unmarshal([]byte(v), &strct.Value); err != nil {
                return err
             }
        case "warningOnly":
            if err := json.Unmarshal([]byte(v), &strct.WarningOnly); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
