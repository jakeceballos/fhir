// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// TriggerDefinition A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
type TriggerDefinition struct {

  // A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.
  Condition *Expression `json:"condition,omitempty"`

  // The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.
  Data []*DataRequirement `json:"data,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.
  Name string `json:"name,omitempty"`

  // The timing of the event (if this is a periodic trigger).
  TimingDate string `json:"timingDate,omitempty"`

  // The timing of the event (if this is a periodic trigger).
  TimingDateTime string `json:"timingDateTime,omitempty"`

  // The timing of the event (if this is a periodic trigger).
  TimingReference *Reference `json:"timingReference,omitempty"`

  // The timing of the event (if this is a periodic trigger).
  TimingTiming *Timing `json:"timingTiming,omitempty"`

  // The type of triggering event.
  Type interface{} `json:"type,omitempty"`
}

func (strct *TriggerDefinition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "condition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"condition\": ")
	if tmp, err := json.Marshal(strct.Condition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "data" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"data\": ")
	if tmp, err := json.Marshal(strct.Data); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDate\": ")
	if tmp, err := json.Marshal(strct.TimingDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDateTime\": ")
	if tmp, err := json.Marshal(strct.TimingDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingReference\": ")
	if tmp, err := json.Marshal(strct.TimingReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingTiming\": ")
	if tmp, err := json.Marshal(strct.TimingTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TriggerDefinition) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "condition":
            if err := json.Unmarshal([]byte(v), &strct.Condition); err != nil {
                return err
             }
        case "data":
            if err := json.Unmarshal([]byte(v), &strct.Data); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "timingDate":
            if err := json.Unmarshal([]byte(v), &strct.TimingDate); err != nil {
                return err
             }
        case "timingDateTime":
            if err := json.Unmarshal([]byte(v), &strct.TimingDateTime); err != nil {
                return err
             }
        case "timingReference":
            if err := json.Unmarshal([]byte(v), &strct.TimingReference); err != nil {
                return err
             }
        case "timingTiming":
            if err := json.Unmarshal([]byte(v), &strct.TimingTiming); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
