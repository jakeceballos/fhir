// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "encoding/json"
    "fmt"
    "bytes"
    "errors"
)

// AllergyIntolerance Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type AllergyIntolerance struct {

  // The source of the information about the allergy that is recorded.
  Asserter *Reference `json:"asserter,omitempty"`

  // Category of the identified substance.
  Category []interface{} `json:"category,omitempty"`

  // The clinical status of the allergy or intolerance.
  ClinicalStatus *CodeableConcept `json:"clinicalStatus,omitempty"`

  // Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., "Latex"), an allergy or intolerance condition (e.g., "Latex allergy"), or a negated/excluded code for a specific substance or class (e.g., "No latex allergy") or a general or categorical negated statement (e.g.,  "No known allergy", "No known drug allergies").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.
  Code *CodeableConcept `json:"code,omitempty"`

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.
  Criticality interface{} `json:"criticality,omitempty"`

  // The encounter when the allergy or intolerance was asserted.
  Encounter *Reference `json:"encounter,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // Represents the date and/or time of the last known occurrence of a reaction event.
  LastOccurrence string `json:"lastOccurrence,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.
  Note []*Annotation `json:"note,omitempty"`

  // Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  OnsetAge *Age `json:"onsetAge,omitempty"`

  // Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  OnsetDateTime string `json:"onsetDateTime,omitempty"`

  // Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  OnsetPeriod *Period `json:"onsetPeriod,omitempty"`

  // Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  OnsetRange *Range `json:"onsetRange,omitempty"`

  // Estimated or actual date,  date-time, or age when allergy or intolerance was identified.
  OnsetString string `json:"onsetString,omitempty"`

  // The patient who has the allergy or intolerance.
  Patient *Reference `json:"patient"`

  // Details about each adverse reaction event linked to exposure to the identified substance.
  Reaction []*AllergyIntoleranceReaction `json:"reaction,omitempty"`

  // The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.
  RecordedDate string `json:"recordedDate,omitempty"`

  // Individual who recorded the record and takes responsibility for its content.
  Recorder *Reference `json:"recorder,omitempty"`

  // This is a AllergyIntolerance resource
  ResourceType interface{} `json:"resourceType"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // Identification of the underlying physiological mechanism for the reaction risk.
  Type interface{} `json:"type,omitempty"`

  // Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).
  VerificationStatus *CodeableConcept `json:"verificationStatus,omitempty"`
}

func (strct *AllergyIntolerance) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "asserter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"asserter\": ")
	if tmp, err := json.Marshal(strct.Asserter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "category" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"category\": ")
	if tmp, err := json.Marshal(strct.Category); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "clinicalStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"clinicalStatus\": ")
	if tmp, err := json.Marshal(strct.ClinicalStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "criticality" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"criticality\": ")
	if tmp, err := json.Marshal(strct.Criticality); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "encounter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"encounter\": ")
	if tmp, err := json.Marshal(strct.Encounter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lastOccurrence" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lastOccurrence\": ")
	if tmp, err := json.Marshal(strct.LastOccurrence); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetAge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetAge\": ")
	if tmp, err := json.Marshal(strct.OnsetAge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetDateTime\": ")
	if tmp, err := json.Marshal(strct.OnsetDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetPeriod\": ")
	if tmp, err := json.Marshal(strct.OnsetPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetRange\": ")
	if tmp, err := json.Marshal(strct.OnsetRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetString\": ")
	if tmp, err := json.Marshal(strct.OnsetString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Patient" field is required
    if strct.Patient == nil {
        return nil, errors.New("patient is a required field")
    }
    // Marshal the "patient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patient\": ")
	if tmp, err := json.Marshal(strct.Patient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reaction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reaction\": ")
	if tmp, err := json.Marshal(strct.Reaction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "recordedDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"recordedDate\": ")
	if tmp, err := json.Marshal(strct.RecordedDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "recorder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"recorder\": ")
	if tmp, err := json.Marshal(strct.Recorder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "verificationStatus" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"verificationStatus\": ")
	if tmp, err := json.Marshal(strct.VerificationStatus); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *AllergyIntolerance) UnmarshalJSON(b []byte) error {
    patientReceived := false
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "asserter":
            if err := json.Unmarshal([]byte(v), &strct.Asserter); err != nil {
                return err
             }
        case "category":
            if err := json.Unmarshal([]byte(v), &strct.Category); err != nil {
                return err
             }
        case "clinicalStatus":
            if err := json.Unmarshal([]byte(v), &strct.ClinicalStatus); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "criticality":
            if err := json.Unmarshal([]byte(v), &strct.Criticality); err != nil {
                return err
             }
        case "encounter":
            if err := json.Unmarshal([]byte(v), &strct.Encounter); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "lastOccurrence":
            if err := json.Unmarshal([]byte(v), &strct.LastOccurrence); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "onsetAge":
            if err := json.Unmarshal([]byte(v), &strct.OnsetAge); err != nil {
                return err
             }
        case "onsetDateTime":
            if err := json.Unmarshal([]byte(v), &strct.OnsetDateTime); err != nil {
                return err
             }
        case "onsetPeriod":
            if err := json.Unmarshal([]byte(v), &strct.OnsetPeriod); err != nil {
                return err
             }
        case "onsetRange":
            if err := json.Unmarshal([]byte(v), &strct.OnsetRange); err != nil {
                return err
             }
        case "onsetString":
            if err := json.Unmarshal([]byte(v), &strct.OnsetString); err != nil {
                return err
             }
        case "patient":
            if err := json.Unmarshal([]byte(v), &strct.Patient); err != nil {
                return err
             }
            patientReceived = true
        case "reaction":
            if err := json.Unmarshal([]byte(v), &strct.Reaction); err != nil {
                return err
             }
        case "recordedDate":
            if err := json.Unmarshal([]byte(v), &strct.RecordedDate); err != nil {
                return err
             }
        case "recorder":
            if err := json.Unmarshal([]byte(v), &strct.Recorder); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "verificationStatus":
            if err := json.Unmarshal([]byte(v), &strct.VerificationStatus); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if patient (a required property) was received
    if !patientReceived {
        return errors.New("\"patient\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
