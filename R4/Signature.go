// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Signature A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
type Signature struct {

  // The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.
  Data string `json:"data,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // A reference to an application-usable description of the identity that is represented by the signature.
  OnBehalfOf *Reference `json:"onBehalfOf,omitempty"`

  // A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.
  SigFormat string `json:"sigFormat,omitempty"`

  // A mime type that indicates the technical format of the target resources signed by the signature.
  TargetFormat string `json:"targetFormat,omitempty"`

  // An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.
  Type []*Coding `json:"type"`

  // When the digital signature was signed.
  When string `json:"when,omitempty"`

  // A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).
  Who *Reference `json:"who"`
}

func (strct *Signature) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "data" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"data\": ")
	if tmp, err := json.Marshal(strct.Data); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onBehalfOf" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onBehalfOf\": ")
	if tmp, err := json.Marshal(strct.OnBehalfOf); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sigFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sigFormat\": ")
	if tmp, err := json.Marshal(strct.SigFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "targetFormat" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"targetFormat\": ")
	if tmp, err := json.Marshal(strct.TargetFormat); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Type" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "when" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"when\": ")
	if tmp, err := json.Marshal(strct.When); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Who" field is required
    if strct.Who == nil {
        return nil, errors.New("who is a required field")
    }
    // Marshal the "who" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"who\": ")
	if tmp, err := json.Marshal(strct.Who); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Signature) UnmarshalJSON(b []byte) error {
    typeReceived := false
    whoReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "data":
            if err := json.Unmarshal([]byte(v), &strct.Data); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "onBehalfOf":
            if err := json.Unmarshal([]byte(v), &strct.OnBehalfOf); err != nil {
                return err
             }
        case "sigFormat":
            if err := json.Unmarshal([]byte(v), &strct.SigFormat); err != nil {
                return err
             }
        case "targetFormat":
            if err := json.Unmarshal([]byte(v), &strct.TargetFormat); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
            typeReceived = true
        case "when":
            if err := json.Unmarshal([]byte(v), &strct.When); err != nil {
                return err
             }
        case "who":
            if err := json.Unmarshal([]byte(v), &strct.Who); err != nil {
                return err
             }
            whoReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if type (a required property) was received
    if !typeReceived {
        return errors.New("\"type\" is required but was not present")
    }
    // check if who (a required property) was received
    if !whoReceived {
        return errors.New("\"who\" is required but was not present")
    }
    return nil
}
