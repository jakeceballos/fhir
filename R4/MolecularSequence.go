// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// MolecularSequence Raw data describing a biological sequence.
type MolecularSequence struct {

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // Whether the sequence is numbered starting at 0 (0-based numbering or coordinates, inclusive start, exclusive end) or starting at 1 (1-based numbering, inclusive start and inclusive end).
  CoordinateSystem float64 `json:"coordinateSystem,omitempty"`

  // The method for sequencing, for example, chip information.
  Device *Reference `json:"device,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A unique identifier for this particular sequence instance. This is a FHIR-defined id.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Sequence that was observed. It is the result marked by referenceSeq along with variant records on referenceSeq. This shall start from referenceSeq.windowStart and end by referenceSeq.windowEnd.
  ObservedSeq string `json:"observedSeq,omitempty"`

  // The patient whose sequencing results are described by this resource.
  Patient *Reference `json:"patient,omitempty"`

  // The organization or lab that should be responsible for this result.
  Performer *Reference `json:"performer,omitempty"`

  // Pointer to next atomic sequence which at most contains one variant.
  Pointer []*Reference `json:"pointer,omitempty"`

  // An experimental feature attribute that defines the quality of the feature in a quantitative way, such as a phred quality score ([SO:0001686](http://www.sequenceontology.org/browser/current_svn/term/SO:0001686)).
  Quality []*MolecularSequenceQuality `json:"quality,omitempty"`

  // The number of copies of the sequence of interest. (RNASeq).
  Quantity *Quantity `json:"quantity,omitempty"`

  // Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.
  ReadCoverage float64 `json:"readCoverage,omitempty"`

  // A sequence that is used as a reference to describe variants that are present in a sequence analyzed.
  ReferenceSeq *MolecularSequenceReferenceSeq `json:"referenceSeq,omitempty"`

  // Configurations of the external repository. The repository shall store target's observedSeq or records related with target's observedSeq.
  Repository []*MolecularSequenceRepository `json:"repository,omitempty"`

  // This is a MolecularSequence resource
  ResourceType interface{} `json:"resourceType"`

  // Specimen used for sequencing.
  Specimen *Reference `json:"specimen,omitempty"`

  // Information about chromosome structure variation.
  StructureVariant []*MolecularSequenceStructureVariant `json:"structureVariant,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // Amino Acid Sequence/ DNA Sequence / RNA Sequence.
  Type interface{} `json:"type,omitempty"`

  // The definition of variant here originates from Sequence ontology ([variant_of](http://www.sequenceontology.org/browser/current_svn/term/variant_of)). This element can represent amino acid or nucleic sequence change(including insertion,deletion,SNP,etc.)  It can represent some complex mutation or segment variation with the assist of CIGAR string.
  Variant []*MolecularSequenceVariant `json:"variant,omitempty"`
}

func (strct *MolecularSequence) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "coordinateSystem" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"coordinateSystem\": ")
	if tmp, err := json.Marshal(strct.CoordinateSystem); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "device" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"device\": ")
	if tmp, err := json.Marshal(strct.Device); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "observedSeq" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"observedSeq\": ")
	if tmp, err := json.Marshal(strct.ObservedSeq); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "patient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patient\": ")
	if tmp, err := json.Marshal(strct.Patient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performer\": ")
	if tmp, err := json.Marshal(strct.Performer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "pointer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"pointer\": ")
	if tmp, err := json.Marshal(strct.Pointer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quality" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quality\": ")
	if tmp, err := json.Marshal(strct.Quality); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "quantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"quantity\": ")
	if tmp, err := json.Marshal(strct.Quantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "readCoverage" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"readCoverage\": ")
	if tmp, err := json.Marshal(strct.ReadCoverage); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "referenceSeq" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"referenceSeq\": ")
	if tmp, err := json.Marshal(strct.ReferenceSeq); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "repository" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"repository\": ")
	if tmp, err := json.Marshal(strct.Repository); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specimen" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specimen\": ")
	if tmp, err := json.Marshal(strct.Specimen); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "structureVariant" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"structureVariant\": ")
	if tmp, err := json.Marshal(strct.StructureVariant); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "variant" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"variant\": ")
	if tmp, err := json.Marshal(strct.Variant); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MolecularSequence) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "coordinateSystem":
            if err := json.Unmarshal([]byte(v), &strct.CoordinateSystem); err != nil {
                return err
             }
        case "device":
            if err := json.Unmarshal([]byte(v), &strct.Device); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "observedSeq":
            if err := json.Unmarshal([]byte(v), &strct.ObservedSeq); err != nil {
                return err
             }
        case "patient":
            if err := json.Unmarshal([]byte(v), &strct.Patient); err != nil {
                return err
             }
        case "performer":
            if err := json.Unmarshal([]byte(v), &strct.Performer); err != nil {
                return err
             }
        case "pointer":
            if err := json.Unmarshal([]byte(v), &strct.Pointer); err != nil {
                return err
             }
        case "quality":
            if err := json.Unmarshal([]byte(v), &strct.Quality); err != nil {
                return err
             }
        case "quantity":
            if err := json.Unmarshal([]byte(v), &strct.Quantity); err != nil {
                return err
             }
        case "readCoverage":
            if err := json.Unmarshal([]byte(v), &strct.ReadCoverage); err != nil {
                return err
             }
        case "referenceSeq":
            if err := json.Unmarshal([]byte(v), &strct.ReferenceSeq); err != nil {
                return err
             }
        case "repository":
            if err := json.Unmarshal([]byte(v), &strct.Repository); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "specimen":
            if err := json.Unmarshal([]byte(v), &strct.Specimen); err != nil {
                return err
             }
        case "structureVariant":
            if err := json.Unmarshal([]byte(v), &strct.StructureVariant); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "variant":
            if err := json.Unmarshal([]byte(v), &strct.Variant); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
