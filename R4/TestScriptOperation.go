// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// TestScriptOperation A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScriptOperation struct {

  // The mime-type to use for RESTful operation in the 'Accept' header.
  Accept string `json:"accept,omitempty"`

  // The mime-type to use for RESTful operation in the 'Content-Type' header.
  ContentType string `json:"contentType,omitempty"`

  // The description would be used by test engines for tracking and reporting purposes.
  Description string `json:"description,omitempty"`

  // The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.
  Destination float64 `json:"destination,omitempty"`

  // Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.
  EncodeRequestUrl bool `json:"encodeRequestUrl,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // The label would be used for tracking/logging purposes by test engines.
  Label string `json:"label,omitempty"`

  // The HTTP method the test engine MUST use for this operation regardless of any other operation details.
  Method interface{} `json:"method,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.
  Origin float64 `json:"origin,omitempty"`

  // Path plus parameters after [type].  Used to set parts of the request URL explicitly.
  Params string `json:"params,omitempty"`

  // Header elements would be used to set HTTP headers.
  RequestHeader []*TestScriptRequestHeader `json:"requestHeader,omitempty"`

  // The fixture id (maybe new) to map to the request.
  RequestId string `json:"requestId,omitempty"`

  // The type of the resource.  See http://build.fhir.org/resourcelist.html.
  Resource string `json:"resource,omitempty"`

  // The fixture id (maybe new) to map to the response.
  ResponseId string `json:"responseId,omitempty"`

  // The id of the fixture used as the body of a PUT or POST request.
  SourceId string `json:"sourceId,omitempty"`

  // Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.
  TargetId string `json:"targetId,omitempty"`

  // Server interaction or operation type.
  Type *Coding `json:"type,omitempty"`

  // Complete request URL.
  Url string `json:"url,omitempty"`
}

func (strct *TestScriptOperation) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "accept" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"accept\": ")
	if tmp, err := json.Marshal(strct.Accept); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contentType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contentType\": ")
	if tmp, err := json.Marshal(strct.ContentType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "destination" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"destination\": ")
	if tmp, err := json.Marshal(strct.Destination); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "encodeRequestUrl" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"encodeRequestUrl\": ")
	if tmp, err := json.Marshal(strct.EncodeRequestUrl); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "label" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"label\": ")
	if tmp, err := json.Marshal(strct.Label); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "method" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"method\": ")
	if tmp, err := json.Marshal(strct.Method); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "origin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"origin\": ")
	if tmp, err := json.Marshal(strct.Origin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "params" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"params\": ")
	if tmp, err := json.Marshal(strct.Params); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestHeader" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestHeader\": ")
	if tmp, err := json.Marshal(strct.RequestHeader); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requestId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requestId\": ")
	if tmp, err := json.Marshal(strct.RequestId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resource\": ")
	if tmp, err := json.Marshal(strct.Resource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "responseId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"responseId\": ")
	if tmp, err := json.Marshal(strct.ResponseId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sourceId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sourceId\": ")
	if tmp, err := json.Marshal(strct.SourceId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "targetId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"targetId\": ")
	if tmp, err := json.Marshal(strct.TargetId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "url" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"url\": ")
	if tmp, err := json.Marshal(strct.Url); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *TestScriptOperation) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "accept":
            if err := json.Unmarshal([]byte(v), &strct.Accept); err != nil {
                return err
             }
        case "contentType":
            if err := json.Unmarshal([]byte(v), &strct.ContentType); err != nil {
                return err
             }
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "destination":
            if err := json.Unmarshal([]byte(v), &strct.Destination); err != nil {
                return err
             }
        case "encodeRequestUrl":
            if err := json.Unmarshal([]byte(v), &strct.EncodeRequestUrl); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "label":
            if err := json.Unmarshal([]byte(v), &strct.Label); err != nil {
                return err
             }
        case "method":
            if err := json.Unmarshal([]byte(v), &strct.Method); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "origin":
            if err := json.Unmarshal([]byte(v), &strct.Origin); err != nil {
                return err
             }
        case "params":
            if err := json.Unmarshal([]byte(v), &strct.Params); err != nil {
                return err
             }
        case "requestHeader":
            if err := json.Unmarshal([]byte(v), &strct.RequestHeader); err != nil {
                return err
             }
        case "requestId":
            if err := json.Unmarshal([]byte(v), &strct.RequestId); err != nil {
                return err
             }
        case "resource":
            if err := json.Unmarshal([]byte(v), &strct.Resource); err != nil {
                return err
             }
        case "responseId":
            if err := json.Unmarshal([]byte(v), &strct.ResponseId); err != nil {
                return err
             }
        case "sourceId":
            if err := json.Unmarshal([]byte(v), &strct.SourceId); err != nil {
                return err
             }
        case "targetId":
            if err := json.Unmarshal([]byte(v), &strct.TargetId); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "url":
            if err := json.Unmarshal([]byte(v), &strct.Url); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
