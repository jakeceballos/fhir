// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// FamilyMemberHistoryCondition Significant health conditions for a person related to the patient relevant in the context of care for the patient.
type FamilyMemberHistoryCondition struct {

  // The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.
  Code *CodeableConcept `json:"code"`

  // This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.
  ContributedToDeath bool `json:"contributedToDeath,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // An area where general notes can be placed about this specific condition.
  Note []*Annotation `json:"note,omitempty"`

  // Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  OnsetAge *Age `json:"onsetAge,omitempty"`

  // Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  OnsetPeriod *Period `json:"onsetPeriod,omitempty"`

  // Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  OnsetRange *Range `json:"onsetRange,omitempty"`

  // Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.
  OnsetString string `json:"onsetString,omitempty"`

  // Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.
  Outcome *CodeableConcept `json:"outcome,omitempty"`
}

func (strct *FamilyMemberHistoryCondition) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Code" field is required
    if strct.Code == nil {
        return nil, errors.New("code is a required field")
    }
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "contributedToDeath" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contributedToDeath\": ")
	if tmp, err := json.Marshal(strct.ContributedToDeath); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetAge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetAge\": ")
	if tmp, err := json.Marshal(strct.OnsetAge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetPeriod\": ")
	if tmp, err := json.Marshal(strct.OnsetPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetRange\": ")
	if tmp, err := json.Marshal(strct.OnsetRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "onsetString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"onsetString\": ")
	if tmp, err := json.Marshal(strct.OnsetString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "outcome" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"outcome\": ")
	if tmp, err := json.Marshal(strct.Outcome); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *FamilyMemberHistoryCondition) UnmarshalJSON(b []byte) error {
    codeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
            codeReceived = true
        case "contributedToDeath":
            if err := json.Unmarshal([]byte(v), &strct.ContributedToDeath); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "onsetAge":
            if err := json.Unmarshal([]byte(v), &strct.OnsetAge); err != nil {
                return err
             }
        case "onsetPeriod":
            if err := json.Unmarshal([]byte(v), &strct.OnsetPeriod); err != nil {
                return err
             }
        case "onsetRange":
            if err := json.Unmarshal([]byte(v), &strct.OnsetRange); err != nil {
                return err
             }
        case "onsetString":
            if err := json.Unmarshal([]byte(v), &strct.OnsetString); err != nil {
                return err
             }
        case "outcome":
            if err := json.Unmarshal([]byte(v), &strct.Outcome); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if code (a required property) was received
    if !codeReceived {
        return errors.New("\"code\" is required but was not present")
    }
    return nil
}
