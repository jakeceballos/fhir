// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// MedicinalProductIngredientStrength An ingredient of a manufactured item or pharmaceutical product.
type MedicinalProductIngredientStrength struct {

  // The strength per unitary volume (or mass).
  Concentration *Ratio `json:"concentration,omitempty"`

  // A lower limit for the strength per unitary volume (or mass), for when there is a range. The concentration attribute then becomes the upper limit.
  ConcentrationLowLimit *Ratio `json:"concentrationLowLimit,omitempty"`

  // The country or countries for which the strength range applies.
  Country []*CodeableConcept `json:"country,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // For when strength is measured at a particular point or distance.
  MeasurementPoint string `json:"measurementPoint,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item.
  Presentation *Ratio `json:"presentation"`

  // A lower limit for the quantity of substance in the unit of presentation. For use when there is a range of strengths, this is the lower limit, with the presentation attribute becoming the upper limit.
  PresentationLowLimit *Ratio `json:"presentationLowLimit,omitempty"`

  // Strength expressed in terms of a reference substance.
  ReferenceStrength []*MedicinalProductIngredientReferenceStrength `json:"referenceStrength,omitempty"`
}

func (strct *MedicinalProductIngredientStrength) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "concentration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"concentration\": ")
	if tmp, err := json.Marshal(strct.Concentration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "concentrationLowLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"concentrationLowLimit\": ")
	if tmp, err := json.Marshal(strct.ConcentrationLowLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "country" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"country\": ")
	if tmp, err := json.Marshal(strct.Country); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "measurementPoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"measurementPoint\": ")
	if tmp, err := json.Marshal(strct.MeasurementPoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Presentation" field is required
    if strct.Presentation == nil {
        return nil, errors.New("presentation is a required field")
    }
    // Marshal the "presentation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"presentation\": ")
	if tmp, err := json.Marshal(strct.Presentation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "presentationLowLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"presentationLowLimit\": ")
	if tmp, err := json.Marshal(strct.PresentationLowLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "referenceStrength" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"referenceStrength\": ")
	if tmp, err := json.Marshal(strct.ReferenceStrength); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MedicinalProductIngredientStrength) UnmarshalJSON(b []byte) error {
    presentationReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "concentration":
            if err := json.Unmarshal([]byte(v), &strct.Concentration); err != nil {
                return err
             }
        case "concentrationLowLimit":
            if err := json.Unmarshal([]byte(v), &strct.ConcentrationLowLimit); err != nil {
                return err
             }
        case "country":
            if err := json.Unmarshal([]byte(v), &strct.Country); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "measurementPoint":
            if err := json.Unmarshal([]byte(v), &strct.MeasurementPoint); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "presentation":
            if err := json.Unmarshal([]byte(v), &strct.Presentation); err != nil {
                return err
             }
            presentationReceived = true
        case "presentationLowLimit":
            if err := json.Unmarshal([]byte(v), &strct.PresentationLowLimit); err != nil {
                return err
             }
        case "referenceStrength":
            if err := json.Unmarshal([]byte(v), &strct.ReferenceStrength); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if presentation (a required property) was received
    if !presentationReceived {
        return errors.New("\"presentation\" is required but was not present")
    }
    return nil
}
