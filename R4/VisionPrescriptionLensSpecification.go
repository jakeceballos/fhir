// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "errors"
    "encoding/json"
    "fmt"
    "bytes"
)

// VisionPrescriptionLensSpecification An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescriptionLensSpecification struct {

  // Power adjustment for multifocal lenses measured in dioptres (0.25 units).
  Add float64 `json:"add,omitempty"`

  // Adjustment for astigmatism measured in integer degrees.
  Axis float64 `json:"axis,omitempty"`

  // Back curvature measured in millimetres.
  BackCurve float64 `json:"backCurve,omitempty"`

  // Brand recommendations or restrictions.
  Brand string `json:"brand,omitempty"`

  // Special color or pattern.
  Color string `json:"color,omitempty"`

  // Power adjustment for astigmatism measured in dioptres (0.25 units).
  Cylinder float64 `json:"cylinder,omitempty"`

  // Contact lens diameter measured in millimetres.
  Diameter float64 `json:"diameter,omitempty"`

  // The recommended maximum wear period for the lens.
  Duration *Quantity `json:"duration,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // The eye for which the lens specification applies.
  Eye interface{} `json:"eye,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Notes for special requirements such as coatings and lens materials.
  Note []*Annotation `json:"note,omitempty"`

  // Contact lens power measured in dioptres (0.25 units).
  Power float64 `json:"power,omitempty"`

  // Allows for adjustment on two axis.
  Prism []*VisionPrescriptionPrism `json:"prism,omitempty"`

  // Identifies the type of vision correction product which is required for the patient.
  Product *CodeableConcept `json:"product"`

  // Lens power measured in dioptres (0.25 units).
  Sphere float64 `json:"sphere,omitempty"`
}

func (strct *VisionPrescriptionLensSpecification) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "add" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"add\": ")
	if tmp, err := json.Marshal(strct.Add); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "axis" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"axis\": ")
	if tmp, err := json.Marshal(strct.Axis); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "backCurve" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"backCurve\": ")
	if tmp, err := json.Marshal(strct.BackCurve); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "brand" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"brand\": ")
	if tmp, err := json.Marshal(strct.Brand); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "color" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"color\": ")
	if tmp, err := json.Marshal(strct.Color); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "cylinder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"cylinder\": ")
	if tmp, err := json.Marshal(strct.Cylinder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "diameter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"diameter\": ")
	if tmp, err := json.Marshal(strct.Diameter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "duration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"duration\": ")
	if tmp, err := json.Marshal(strct.Duration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "eye" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"eye\": ")
	if tmp, err := json.Marshal(strct.Eye); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "power" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"power\": ")
	if tmp, err := json.Marshal(strct.Power); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "prism" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"prism\": ")
	if tmp, err := json.Marshal(strct.Prism); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Product" field is required
    if strct.Product == nil {
        return nil, errors.New("product is a required field")
    }
    // Marshal the "product" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"product\": ")
	if tmp, err := json.Marshal(strct.Product); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sphere" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sphere\": ")
	if tmp, err := json.Marshal(strct.Sphere); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *VisionPrescriptionLensSpecification) UnmarshalJSON(b []byte) error {
    productReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "add":
            if err := json.Unmarshal([]byte(v), &strct.Add); err != nil {
                return err
             }
        case "axis":
            if err := json.Unmarshal([]byte(v), &strct.Axis); err != nil {
                return err
             }
        case "backCurve":
            if err := json.Unmarshal([]byte(v), &strct.BackCurve); err != nil {
                return err
             }
        case "brand":
            if err := json.Unmarshal([]byte(v), &strct.Brand); err != nil {
                return err
             }
        case "color":
            if err := json.Unmarshal([]byte(v), &strct.Color); err != nil {
                return err
             }
        case "cylinder":
            if err := json.Unmarshal([]byte(v), &strct.Cylinder); err != nil {
                return err
             }
        case "diameter":
            if err := json.Unmarshal([]byte(v), &strct.Diameter); err != nil {
                return err
             }
        case "duration":
            if err := json.Unmarshal([]byte(v), &strct.Duration); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "eye":
            if err := json.Unmarshal([]byte(v), &strct.Eye); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "power":
            if err := json.Unmarshal([]byte(v), &strct.Power); err != nil {
                return err
             }
        case "prism":
            if err := json.Unmarshal([]byte(v), &strct.Prism); err != nil {
                return err
             }
        case "product":
            if err := json.Unmarshal([]byte(v), &strct.Product); err != nil {
                return err
             }
            productReceived = true
        case "sphere":
            if err := json.Unmarshal([]byte(v), &strct.Sphere); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if product (a required property) was received
    if !productReceived {
        return errors.New("\"product\" is required but was not present")
    }
    return nil
}
