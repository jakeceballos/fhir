// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// ImagingStudySeries Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
type ImagingStudySeries struct {

  // The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.
  BodySite *Coding `json:"bodySite,omitempty"`

  // A description of the series.
  Description string `json:"description,omitempty"`

  // The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.
  Endpoint []*Reference `json:"endpoint,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // A single SOP instance within the series, e.g. an image, or presentation state.
  Instance []*ImagingStudyInstance `json:"instance,omitempty"`

  // The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.
  Laterality *Coding `json:"laterality,omitempty"`

  // The modality of this series sequence.
  Modality *Coding `json:"modality"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The numeric identifier of this series in the study.
  Number float64 `json:"number,omitempty"`

  // Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.
  NumberOfInstances float64 `json:"numberOfInstances,omitempty"`

  // Indicates who or what performed the series and how they were involved.
  Performer []*ImagingStudyPerformer `json:"performer,omitempty"`

  // The specimen imaged, e.g., for whole slide imaging of a biopsy.
  Specimen []*Reference `json:"specimen,omitempty"`

  // The date and time the series was started.
  Started string `json:"started,omitempty"`

  // The DICOM Series Instance UID for the series.
  Uid string `json:"uid,omitempty"`
}

func (strct *ImagingStudySeries) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "bodySite" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"bodySite\": ")
	if tmp, err := json.Marshal(strct.BodySite); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "endpoint" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"endpoint\": ")
	if tmp, err := json.Marshal(strct.Endpoint); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "instance" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"instance\": ")
	if tmp, err := json.Marshal(strct.Instance); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "laterality" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"laterality\": ")
	if tmp, err := json.Marshal(strct.Laterality); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Modality" field is required
    if strct.Modality == nil {
        return nil, errors.New("modality is a required field")
    }
    // Marshal the "modality" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modality\": ")
	if tmp, err := json.Marshal(strct.Modality); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "number" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"number\": ")
	if tmp, err := json.Marshal(strct.Number); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "numberOfInstances" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"numberOfInstances\": ")
	if tmp, err := json.Marshal(strct.NumberOfInstances); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performer\": ")
	if tmp, err := json.Marshal(strct.Performer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "specimen" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"specimen\": ")
	if tmp, err := json.Marshal(strct.Specimen); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "started" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"started\": ")
	if tmp, err := json.Marshal(strct.Started); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "uid" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"uid\": ")
	if tmp, err := json.Marshal(strct.Uid); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ImagingStudySeries) UnmarshalJSON(b []byte) error {
    modalityReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "bodySite":
            if err := json.Unmarshal([]byte(v), &strct.BodySite); err != nil {
                return err
             }
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "endpoint":
            if err := json.Unmarshal([]byte(v), &strct.Endpoint); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "instance":
            if err := json.Unmarshal([]byte(v), &strct.Instance); err != nil {
                return err
             }
        case "laterality":
            if err := json.Unmarshal([]byte(v), &strct.Laterality); err != nil {
                return err
             }
        case "modality":
            if err := json.Unmarshal([]byte(v), &strct.Modality); err != nil {
                return err
             }
            modalityReceived = true
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "number":
            if err := json.Unmarshal([]byte(v), &strct.Number); err != nil {
                return err
             }
        case "numberOfInstances":
            if err := json.Unmarshal([]byte(v), &strct.NumberOfInstances); err != nil {
                return err
             }
        case "performer":
            if err := json.Unmarshal([]byte(v), &strct.Performer); err != nil {
                return err
             }
        case "specimen":
            if err := json.Unmarshal([]byte(v), &strct.Specimen); err != nil {
                return err
             }
        case "started":
            if err := json.Unmarshal([]byte(v), &strct.Started); err != nil {
                return err
             }
        case "uid":
            if err := json.Unmarshal([]byte(v), &strct.Uid); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if modality (a required property) was received
    if !modalityReceived {
        return errors.New("\"modality\" is required but was not present")
    }
    return nil
}
