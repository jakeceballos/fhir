// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "fmt"
    "bytes"
    "errors"
    "encoding/json"
)

// SampledData A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
type SampledData struct {

  // A series of data points which are decimal values separated by a single space (character u20). The special values "E" (error), "L" (below detection limit) and "U" (above detection limit) can also be used in place of a decimal value.
  Data string `json:"data,omitempty"`

  // The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.
  Dimensions float64 `json:"dimensions,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // A correction factor that is applied to the sampled data points before they are added to the origin.
  Factor float64 `json:"factor,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // The lower limit of detection of the measured points. This is needed if any of the data points have the value "L" (lower than detection limit).
  LowerLimit float64 `json:"lowerLimit,omitempty"`

  // The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.
  Origin *Quantity `json:"origin"`

  // The length of time between sampling times, measured in milliseconds.
  Period float64 `json:"period,omitempty"`

  // The upper limit of detection of the measured points. This is needed if any of the data points have the value "U" (higher than detection limit).
  UpperLimit float64 `json:"upperLimit,omitempty"`
}

func (strct *SampledData) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "data" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"data\": ")
	if tmp, err := json.Marshal(strct.Data); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dimensions" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dimensions\": ")
	if tmp, err := json.Marshal(strct.Dimensions); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "factor" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"factor\": ")
	if tmp, err := json.Marshal(strct.Factor); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lowerLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lowerLimit\": ")
	if tmp, err := json.Marshal(strct.LowerLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Origin" field is required
    if strct.Origin == nil {
        return nil, errors.New("origin is a required field")
    }
    // Marshal the "origin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"origin\": ")
	if tmp, err := json.Marshal(strct.Origin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "period" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"period\": ")
	if tmp, err := json.Marshal(strct.Period); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "upperLimit" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"upperLimit\": ")
	if tmp, err := json.Marshal(strct.UpperLimit); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *SampledData) UnmarshalJSON(b []byte) error {
    originReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "data":
            if err := json.Unmarshal([]byte(v), &strct.Data); err != nil {
                return err
             }
        case "dimensions":
            if err := json.Unmarshal([]byte(v), &strct.Dimensions); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "factor":
            if err := json.Unmarshal([]byte(v), &strct.Factor); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "lowerLimit":
            if err := json.Unmarshal([]byte(v), &strct.LowerLimit); err != nil {
                return err
             }
        case "origin":
            if err := json.Unmarshal([]byte(v), &strct.Origin); err != nil {
                return err
             }
            originReceived = true
        case "period":
            if err := json.Unmarshal([]byte(v), &strct.Period); err != nil {
                return err
             }
        case "upperLimit":
            if err := json.Unmarshal([]byte(v), &strct.UpperLimit); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if origin (a required property) was received
    if !originReceived {
        return errors.New("\"origin\" is required but was not present")
    }
    return nil
}
