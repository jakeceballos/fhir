// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// QuestionnaireEnableWhen A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
type QuestionnaireEnableWhen struct {

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerBoolean bool `json:"answerBoolean,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerCoding *Coding `json:"answerCoding,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerDate string `json:"answerDate,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerDateTime string `json:"answerDateTime,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerDecimal float64 `json:"answerDecimal,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerInteger float64 `json:"answerInteger,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerQuantity *Quantity `json:"answerQuantity,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerReference *Reference `json:"answerReference,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerString string `json:"answerString,omitempty"`

  // A value that the referenced question is tested using the specified operator in order for the item to be enabled.
  AnswerTime string `json:"answerTime,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Specifies the criteria by which the question is enabled.
  Operator interface{} `json:"operator,omitempty"`

  // The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.
  Question string `json:"question,omitempty"`
}

func (strct *QuestionnaireEnableWhen) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "answerBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerBoolean\": ")
	if tmp, err := json.Marshal(strct.AnswerBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerCoding" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerCoding\": ")
	if tmp, err := json.Marshal(strct.AnswerCoding); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerDate\": ")
	if tmp, err := json.Marshal(strct.AnswerDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerDateTime\": ")
	if tmp, err := json.Marshal(strct.AnswerDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerDecimal" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerDecimal\": ")
	if tmp, err := json.Marshal(strct.AnswerDecimal); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerInteger" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerInteger\": ")
	if tmp, err := json.Marshal(strct.AnswerInteger); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerQuantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerQuantity\": ")
	if tmp, err := json.Marshal(strct.AnswerQuantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerReference\": ")
	if tmp, err := json.Marshal(strct.AnswerReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerString\": ")
	if tmp, err := json.Marshal(strct.AnswerString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "answerTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answerTime\": ")
	if tmp, err := json.Marshal(strct.AnswerTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "operator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"operator\": ")
	if tmp, err := json.Marshal(strct.Operator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "question" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"question\": ")
	if tmp, err := json.Marshal(strct.Question); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *QuestionnaireEnableWhen) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "answerBoolean":
            if err := json.Unmarshal([]byte(v), &strct.AnswerBoolean); err != nil {
                return err
             }
        case "answerCoding":
            if err := json.Unmarshal([]byte(v), &strct.AnswerCoding); err != nil {
                return err
             }
        case "answerDate":
            if err := json.Unmarshal([]byte(v), &strct.AnswerDate); err != nil {
                return err
             }
        case "answerDateTime":
            if err := json.Unmarshal([]byte(v), &strct.AnswerDateTime); err != nil {
                return err
             }
        case "answerDecimal":
            if err := json.Unmarshal([]byte(v), &strct.AnswerDecimal); err != nil {
                return err
             }
        case "answerInteger":
            if err := json.Unmarshal([]byte(v), &strct.AnswerInteger); err != nil {
                return err
             }
        case "answerQuantity":
            if err := json.Unmarshal([]byte(v), &strct.AnswerQuantity); err != nil {
                return err
             }
        case "answerReference":
            if err := json.Unmarshal([]byte(v), &strct.AnswerReference); err != nil {
                return err
             }
        case "answerString":
            if err := json.Unmarshal([]byte(v), &strct.AnswerString); err != nil {
                return err
             }
        case "answerTime":
            if err := json.Unmarshal([]byte(v), &strct.AnswerTime); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "operator":
            if err := json.Unmarshal([]byte(v), &strct.Operator); err != nil {
                return err
             }
        case "question":
            if err := json.Unmarshal([]byte(v), &strct.Question); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
