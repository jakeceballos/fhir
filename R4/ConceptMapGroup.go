// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
    "errors"
)

// ConceptMapGroup A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
type ConceptMapGroup struct {

  // Mappings for an individual concept in the source to one or more concepts in the target.
  Element []*ConceptMapElement `json:"element"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // An absolute URI that identifies the source system where the concepts to be mapped are defined.
  Source string `json:"source,omitempty"`

  // The specific version of the code system, as determined by the code system authority.
  SourceVersion string `json:"sourceVersion,omitempty"`

  // An absolute URI that identifies the target system that the concepts will be mapped to.
  Target string `json:"target,omitempty"`

  // The specific version of the code system, as determined by the code system authority.
  TargetVersion string `json:"targetVersion,omitempty"`

  // What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
  Unmapped *ConceptMapUnmapped `json:"unmapped,omitempty"`
}

func (strct *ConceptMapGroup) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // "Element" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "element" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"element\": ")
	if tmp, err := json.Marshal(strct.Element); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "source" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"source\": ")
	if tmp, err := json.Marshal(strct.Source); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "sourceVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"sourceVersion\": ")
	if tmp, err := json.Marshal(strct.SourceVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "target" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"target\": ")
	if tmp, err := json.Marshal(strct.Target); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "targetVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"targetVersion\": ")
	if tmp, err := json.Marshal(strct.TargetVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "unmapped" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"unmapped\": ")
	if tmp, err := json.Marshal(strct.Unmapped); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ConceptMapGroup) UnmarshalJSON(b []byte) error {
    elementReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "element":
            if err := json.Unmarshal([]byte(v), &strct.Element); err != nil {
                return err
             }
            elementReceived = true
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "source":
            if err := json.Unmarshal([]byte(v), &strct.Source); err != nil {
                return err
             }
        case "sourceVersion":
            if err := json.Unmarshal([]byte(v), &strct.SourceVersion); err != nil {
                return err
             }
        case "target":
            if err := json.Unmarshal([]byte(v), &strct.Target); err != nil {
                return err
             }
        case "targetVersion":
            if err := json.Unmarshal([]byte(v), &strct.TargetVersion); err != nil {
                return err
             }
        case "unmapped":
            if err := json.Unmarshal([]byte(v), &strct.Unmapped); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if element (a required property) was received
    if !elementReceived {
        return errors.New("\"element\" is required but was not present")
    }
    return nil
}
