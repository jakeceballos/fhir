// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// ImplementationGuideResource A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
type ImplementationGuideResource struct {

  // A description of the reason that a resource has been included in the implementation guide.
  Description string `json:"description,omitempty"`

  // If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
  ExampleBoolean bool `json:"exampleBoolean,omitempty"`

  // If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
  ExampleCanonical string `json:"exampleCanonical,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
  FhirVersion []interface{} `json:"fhirVersion,omitempty"`

  // Reference to the id of the grouping this resource appears in.
  GroupingId string `json:"groupingId,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
  Name string `json:"name,omitempty"`

  // Where this resource is found.
  Reference *Reference `json:"reference"`
}

func (strct *ImplementationGuideResource) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "exampleBoolean" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"exampleBoolean\": ")
	if tmp, err := json.Marshal(strct.ExampleBoolean); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "exampleCanonical" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"exampleCanonical\": ")
	if tmp, err := json.Marshal(strct.ExampleCanonical); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "fhirVersion" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"fhirVersion\": ")
	if tmp, err := json.Marshal(strct.FhirVersion); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "groupingId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"groupingId\": ")
	if tmp, err := json.Marshal(strct.GroupingId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "name" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"name\": ")
	if tmp, err := json.Marshal(strct.Name); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Reference" field is required
    if strct.Reference == nil {
        return nil, errors.New("reference is a required field")
    }
    // Marshal the "reference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reference\": ")
	if tmp, err := json.Marshal(strct.Reference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ImplementationGuideResource) UnmarshalJSON(b []byte) error {
    referenceReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "exampleBoolean":
            if err := json.Unmarshal([]byte(v), &strct.ExampleBoolean); err != nil {
                return err
             }
        case "exampleCanonical":
            if err := json.Unmarshal([]byte(v), &strct.ExampleCanonical); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "fhirVersion":
            if err := json.Unmarshal([]byte(v), &strct.FhirVersion); err != nil {
                return err
             }
        case "groupingId":
            if err := json.Unmarshal([]byte(v), &strct.GroupingId); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "name":
            if err := json.Unmarshal([]byte(v), &strct.Name); err != nil {
                return err
             }
        case "reference":
            if err := json.Unmarshal([]byte(v), &strct.Reference); err != nil {
                return err
             }
            referenceReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if reference (a required property) was received
    if !referenceReceived {
        return errors.New("\"reference\" is required but was not present")
    }
    return nil
}
