// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "fmt"
    "errors"
    "bytes"
    "encoding/json"
)

// MedicinalProductAuthorization The regulatory authorization of a medicinal product.
type MedicinalProductAuthorization struct {

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The country in which the marketing authorization has been granted.
  Country []*CodeableConcept `json:"country,omitempty"`

  // A period of time after authorization before generic product applicatiosn can be submitted.
  DataExclusivityPeriod *Period `json:"dataExclusivityPeriod,omitempty"`

  // The date when the first authorization was granted by a Medicines Regulatory Agency.
  DateOfFirstAuthorization string `json:"dateOfFirstAuthorization,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Marketing Authorization Holder.
  Holder *Reference `json:"holder,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // Business identifier for the marketing authorization, as assigned by a regulator.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // Date of first marketing authorization for a company's new medicinal product in any country in the World.
  InternationalBirthDate string `json:"internationalBirthDate,omitempty"`

  // Jurisdiction within a country.
  Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`

  // Authorization in areas within a country.
  JurisdictionalAuthorization []*MedicinalProductAuthorizationJurisdictionalAuthorization `json:"jurisdictionalAuthorization,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The legal framework against which this authorization is granted.
  LegalBasis *CodeableConcept `json:"legalBasis,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The regulatory procedure for granting or amending a marketing authorization.
  Procedure *MedicinalProductAuthorizationProcedure `json:"procedure,omitempty"`

  // Medicines Regulatory Agency.
  Regulator *Reference `json:"regulator,omitempty"`

  // This is a MedicinalProductAuthorization resource
  ResourceType interface{} `json:"resourceType"`

  // The date when a suspended the marketing or the marketing authorization of the product is anticipated to be restored.
  RestoreDate string `json:"restoreDate,omitempty"`

  // The status of the marketing authorization.
  Status *CodeableConcept `json:"status,omitempty"`

  // The date at which the given status has become applicable.
  StatusDate string `json:"statusDate,omitempty"`

  // The medicinal product that is being authorized.
  Subject *Reference `json:"subject,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // The beginning of the time period in which the marketing authorization is in the specific status shall be specified A complete date consisting of day, month and year shall be specified using the ISO 8601 date format.
  ValidityPeriod *Period `json:"validityPeriod,omitempty"`
}

func (strct *MedicinalProductAuthorization) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "country" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"country\": ")
	if tmp, err := json.Marshal(strct.Country); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dataExclusivityPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dataExclusivityPeriod\": ")
	if tmp, err := json.Marshal(strct.DataExclusivityPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "dateOfFirstAuthorization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"dateOfFirstAuthorization\": ")
	if tmp, err := json.Marshal(strct.DateOfFirstAuthorization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "holder" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"holder\": ")
	if tmp, err := json.Marshal(strct.Holder); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "internationalBirthDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"internationalBirthDate\": ")
	if tmp, err := json.Marshal(strct.InternationalBirthDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jurisdiction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jurisdiction\": ")
	if tmp, err := json.Marshal(strct.Jurisdiction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "jurisdictionalAuthorization" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"jurisdictionalAuthorization\": ")
	if tmp, err := json.Marshal(strct.JurisdictionalAuthorization); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "legalBasis" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"legalBasis\": ")
	if tmp, err := json.Marshal(strct.LegalBasis); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "procedure" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"procedure\": ")
	if tmp, err := json.Marshal(strct.Procedure); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "regulator" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"regulator\": ")
	if tmp, err := json.Marshal(strct.Regulator); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "restoreDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"restoreDate\": ")
	if tmp, err := json.Marshal(strct.RestoreDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "statusDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statusDate\": ")
	if tmp, err := json.Marshal(strct.StatusDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subject" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subject\": ")
	if tmp, err := json.Marshal(strct.Subject); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "validityPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"validityPeriod\": ")
	if tmp, err := json.Marshal(strct.ValidityPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *MedicinalProductAuthorization) UnmarshalJSON(b []byte) error {
    resourceTypeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "country":
            if err := json.Unmarshal([]byte(v), &strct.Country); err != nil {
                return err
             }
        case "dataExclusivityPeriod":
            if err := json.Unmarshal([]byte(v), &strct.DataExclusivityPeriod); err != nil {
                return err
             }
        case "dateOfFirstAuthorization":
            if err := json.Unmarshal([]byte(v), &strct.DateOfFirstAuthorization); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "holder":
            if err := json.Unmarshal([]byte(v), &strct.Holder); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "internationalBirthDate":
            if err := json.Unmarshal([]byte(v), &strct.InternationalBirthDate); err != nil {
                return err
             }
        case "jurisdiction":
            if err := json.Unmarshal([]byte(v), &strct.Jurisdiction); err != nil {
                return err
             }
        case "jurisdictionalAuthorization":
            if err := json.Unmarshal([]byte(v), &strct.JurisdictionalAuthorization); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "legalBasis":
            if err := json.Unmarshal([]byte(v), &strct.LegalBasis); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "procedure":
            if err := json.Unmarshal([]byte(v), &strct.Procedure); err != nil {
                return err
             }
        case "regulator":
            if err := json.Unmarshal([]byte(v), &strct.Regulator); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "restoreDate":
            if err := json.Unmarshal([]byte(v), &strct.RestoreDate); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "statusDate":
            if err := json.Unmarshal([]byte(v), &strct.StatusDate); err != nil {
                return err
             }
        case "subject":
            if err := json.Unmarshal([]byte(v), &strct.Subject); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "validityPeriod":
            if err := json.Unmarshal([]byte(v), &strct.ValidityPeriod); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    return nil
}
