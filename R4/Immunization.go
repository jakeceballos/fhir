// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "errors"
    "encoding/json"
    "fmt"
)

// Immunization Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
type Immunization struct {

  // These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
  Contained []interface{} `json:"contained,omitempty"`

  // The quantity of vaccine product that was administered.
  DoseQuantity *Quantity `json:"doseQuantity,omitempty"`

  // Educational material presented to the patient (or guardian) at the time of vaccine administration.
  Education []*ImmunizationEducation `json:"education,omitempty"`

  // The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
  Encounter *Reference `json:"encounter,omitempty"`

  // Date vaccine batch expires.
  ExpirationDate string `json:"expirationDate,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
  FundingSource *CodeableConcept `json:"fundingSource,omitempty"`

  // The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
  Id string `json:"id,omitempty"`

  // A unique identifier assigned to this immunization record.
  Identifier []*Identifier `json:"identifier,omitempty"`

  // A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
  ImplicitRules string `json:"implicitRules,omitempty"`

  // Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
  IsSubpotent bool `json:"isSubpotent,omitempty"`

  // The base language in which the resource is written.
  Language string `json:"language,omitempty"`

  // The service delivery location where the vaccine administration occurred.
  Location *Reference `json:"location,omitempty"`

  // Lot number of the  vaccine product.
  LotNumber string `json:"lotNumber,omitempty"`

  // Name of vaccine manufacturer.
  Manufacturer *Reference `json:"manufacturer,omitempty"`

  // The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
  Meta *Meta `json:"meta,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Extra information about the immunization that is not conveyed by the other attributes.
  Note []*Annotation `json:"note,omitempty"`

  // Date vaccine administered or was to be administered.
  OccurrenceDateTime string `json:"occurrenceDateTime,omitempty"`

  // Date vaccine administered or was to be administered.
  OccurrenceString string `json:"occurrenceString,omitempty"`

  // The patient who either received or did not receive the immunization.
  Patient *Reference `json:"patient"`

  // Indicates who performed the immunization event.
  Performer []*ImmunizationPerformer `json:"performer,omitempty"`

  // An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
  PrimarySource bool `json:"primarySource,omitempty"`

  // Indicates a patient's eligibility for a funding program.
  ProgramEligibility []*CodeableConcept `json:"programEligibility,omitempty"`

  // The protocol (set of recommendations) being followed by the provider who administered the dose.
  ProtocolApplied []*ImmunizationProtocolApplied `json:"protocolApplied,omitempty"`

  // Categorical data indicating that an adverse event is associated in time to an immunization.
  Reaction []*ImmunizationReaction `json:"reaction,omitempty"`

  // Reasons why the vaccine was administered.
  ReasonCode []*CodeableConcept `json:"reasonCode,omitempty"`

  // Condition, Observation or DiagnosticReport that supports why the immunization was administered.
  ReasonReference []*Reference `json:"reasonReference,omitempty"`

  // The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
  Recorded string `json:"recorded,omitempty"`

  // The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
  ReportOrigin *CodeableConcept `json:"reportOrigin,omitempty"`

  // This is a Immunization resource
  ResourceType interface{} `json:"resourceType"`

  // The path by which the vaccine product is taken into the body.
  Route *CodeableConcept `json:"route,omitempty"`

  // Body site where vaccine was administered.
  Site *CodeableConcept `json:"site,omitempty"`

  // Indicates the current status of the immunization event.
  Status string `json:"status,omitempty"`

  // Indicates the reason the immunization event was not performed.
  StatusReason *CodeableConcept `json:"statusReason,omitempty"`

  // Reason why a dose is considered to be subpotent.
  SubpotentReason []*CodeableConcept `json:"subpotentReason,omitempty"`

  // A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
  Text *Narrative `json:"text,omitempty"`

  // Vaccine that was administered or was to be administered.
  VaccineCode *CodeableConcept `json:"vaccineCode"`
}

func (strct *Immunization) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "contained" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"contained\": ")
	if tmp, err := json.Marshal(strct.Contained); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "doseQuantity" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"doseQuantity\": ")
	if tmp, err := json.Marshal(strct.DoseQuantity); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "education" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"education\": ")
	if tmp, err := json.Marshal(strct.Education); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "encounter" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"encounter\": ")
	if tmp, err := json.Marshal(strct.Encounter); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "expirationDate" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"expirationDate\": ")
	if tmp, err := json.Marshal(strct.ExpirationDate); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "fundingSource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"fundingSource\": ")
	if tmp, err := json.Marshal(strct.FundingSource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "identifier" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"identifier\": ")
	if tmp, err := json.Marshal(strct.Identifier); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "implicitRules" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"implicitRules\": ")
	if tmp, err := json.Marshal(strct.ImplicitRules); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "isSubpotent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"isSubpotent\": ")
	if tmp, err := json.Marshal(strct.IsSubpotent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "language" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"language\": ")
	if tmp, err := json.Marshal(strct.Language); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "location" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"location\": ")
	if tmp, err := json.Marshal(strct.Location); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "lotNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"lotNumber\": ")
	if tmp, err := json.Marshal(strct.LotNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "manufacturer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"manufacturer\": ")
	if tmp, err := json.Marshal(strct.Manufacturer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "meta" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"meta\": ")
	if tmp, err := json.Marshal(strct.Meta); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "note" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"note\": ")
	if tmp, err := json.Marshal(strct.Note); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceDateTime\": ")
	if tmp, err := json.Marshal(strct.OccurrenceDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "occurrenceString" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"occurrenceString\": ")
	if tmp, err := json.Marshal(strct.OccurrenceString); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "Patient" field is required
    if strct.Patient == nil {
        return nil, errors.New("patient is a required field")
    }
    // Marshal the "patient" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"patient\": ")
	if tmp, err := json.Marshal(strct.Patient); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "performer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"performer\": ")
	if tmp, err := json.Marshal(strct.Performer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "primarySource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"primarySource\": ")
	if tmp, err := json.Marshal(strct.PrimarySource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "programEligibility" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"programEligibility\": ")
	if tmp, err := json.Marshal(strct.ProgramEligibility); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "protocolApplied" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"protocolApplied\": ")
	if tmp, err := json.Marshal(strct.ProtocolApplied); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reaction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reaction\": ")
	if tmp, err := json.Marshal(strct.Reaction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonCode\": ")
	if tmp, err := json.Marshal(strct.ReasonCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reasonReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reasonReference\": ")
	if tmp, err := json.Marshal(strct.ReasonReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "recorded" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"recorded\": ")
	if tmp, err := json.Marshal(strct.Recorded); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "reportOrigin" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"reportOrigin\": ")
	if tmp, err := json.Marshal(strct.ReportOrigin); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "ResourceType" field is required
    // only required object types supported for marshal checking (for now)
    // Marshal the "resourceType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resourceType\": ")
	if tmp, err := json.Marshal(strct.ResourceType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "route" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"route\": ")
	if tmp, err := json.Marshal(strct.Route); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "site" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"site\": ")
	if tmp, err := json.Marshal(strct.Site); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "status" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"status\": ")
	if tmp, err := json.Marshal(strct.Status); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "statusReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"statusReason\": ")
	if tmp, err := json.Marshal(strct.StatusReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subpotentReason" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subpotentReason\": ")
	if tmp, err := json.Marshal(strct.SubpotentReason); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // "VaccineCode" field is required
    if strct.VaccineCode == nil {
        return nil, errors.New("vaccineCode is a required field")
    }
    // Marshal the "vaccineCode" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"vaccineCode\": ")
	if tmp, err := json.Marshal(strct.VaccineCode); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *Immunization) UnmarshalJSON(b []byte) error {
    patientReceived := false
    resourceTypeReceived := false
    vaccineCodeReceived := false
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "contained":
            if err := json.Unmarshal([]byte(v), &strct.Contained); err != nil {
                return err
             }
        case "doseQuantity":
            if err := json.Unmarshal([]byte(v), &strct.DoseQuantity); err != nil {
                return err
             }
        case "education":
            if err := json.Unmarshal([]byte(v), &strct.Education); err != nil {
                return err
             }
        case "encounter":
            if err := json.Unmarshal([]byte(v), &strct.Encounter); err != nil {
                return err
             }
        case "expirationDate":
            if err := json.Unmarshal([]byte(v), &strct.ExpirationDate); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "fundingSource":
            if err := json.Unmarshal([]byte(v), &strct.FundingSource); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "identifier":
            if err := json.Unmarshal([]byte(v), &strct.Identifier); err != nil {
                return err
             }
        case "implicitRules":
            if err := json.Unmarshal([]byte(v), &strct.ImplicitRules); err != nil {
                return err
             }
        case "isSubpotent":
            if err := json.Unmarshal([]byte(v), &strct.IsSubpotent); err != nil {
                return err
             }
        case "language":
            if err := json.Unmarshal([]byte(v), &strct.Language); err != nil {
                return err
             }
        case "location":
            if err := json.Unmarshal([]byte(v), &strct.Location); err != nil {
                return err
             }
        case "lotNumber":
            if err := json.Unmarshal([]byte(v), &strct.LotNumber); err != nil {
                return err
             }
        case "manufacturer":
            if err := json.Unmarshal([]byte(v), &strct.Manufacturer); err != nil {
                return err
             }
        case "meta":
            if err := json.Unmarshal([]byte(v), &strct.Meta); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "note":
            if err := json.Unmarshal([]byte(v), &strct.Note); err != nil {
                return err
             }
        case "occurrenceDateTime":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceDateTime); err != nil {
                return err
             }
        case "occurrenceString":
            if err := json.Unmarshal([]byte(v), &strct.OccurrenceString); err != nil {
                return err
             }
        case "patient":
            if err := json.Unmarshal([]byte(v), &strct.Patient); err != nil {
                return err
             }
            patientReceived = true
        case "performer":
            if err := json.Unmarshal([]byte(v), &strct.Performer); err != nil {
                return err
             }
        case "primarySource":
            if err := json.Unmarshal([]byte(v), &strct.PrimarySource); err != nil {
                return err
             }
        case "programEligibility":
            if err := json.Unmarshal([]byte(v), &strct.ProgramEligibility); err != nil {
                return err
             }
        case "protocolApplied":
            if err := json.Unmarshal([]byte(v), &strct.ProtocolApplied); err != nil {
                return err
             }
        case "reaction":
            if err := json.Unmarshal([]byte(v), &strct.Reaction); err != nil {
                return err
             }
        case "reasonCode":
            if err := json.Unmarshal([]byte(v), &strct.ReasonCode); err != nil {
                return err
             }
        case "reasonReference":
            if err := json.Unmarshal([]byte(v), &strct.ReasonReference); err != nil {
                return err
             }
        case "recorded":
            if err := json.Unmarshal([]byte(v), &strct.Recorded); err != nil {
                return err
             }
        case "reportOrigin":
            if err := json.Unmarshal([]byte(v), &strct.ReportOrigin); err != nil {
                return err
             }
        case "resourceType":
            if err := json.Unmarshal([]byte(v), &strct.ResourceType); err != nil {
                return err
             }
            resourceTypeReceived = true
        case "route":
            if err := json.Unmarshal([]byte(v), &strct.Route); err != nil {
                return err
             }
        case "site":
            if err := json.Unmarshal([]byte(v), &strct.Site); err != nil {
                return err
             }
        case "status":
            if err := json.Unmarshal([]byte(v), &strct.Status); err != nil {
                return err
             }
        case "statusReason":
            if err := json.Unmarshal([]byte(v), &strct.StatusReason); err != nil {
                return err
             }
        case "subpotentReason":
            if err := json.Unmarshal([]byte(v), &strct.SubpotentReason); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "vaccineCode":
            if err := json.Unmarshal([]byte(v), &strct.VaccineCode); err != nil {
                return err
             }
            vaccineCodeReceived = true
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    // check if patient (a required property) was received
    if !patientReceived {
        return errors.New("\"patient\" is required but was not present")
    }
    // check if resourceType (a required property) was received
    if !resourceTypeReceived {
        return errors.New("\"resourceType\" is required but was not present")
    }
    // check if vaccineCode (a required property) was received
    if !vaccineCodeReceived {
        return errors.New("\"vaccineCode\" is required but was not present")
    }
    return nil
}
