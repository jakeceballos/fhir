// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// ContractAsset Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
type ContractAsset struct {

  // Response to assets.
  Answer []*ContractAnswer `json:"answer,omitempty"`

  // Description of the quality and completeness of the asset that imay be a factor in its valuation.
  Condition string `json:"condition,omitempty"`

  // Circumstance of the asset.
  Context []*ContractContext `json:"context,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.
  LinkId []string `json:"linkId,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // Asset relevant contractual time period.
  Period []*Period `json:"period,omitempty"`

  // Type of Asset availability for use or ownership.
  PeriodType []*CodeableConcept `json:"periodType,omitempty"`

  // Specifies the applicability of the term to an asset resource instance, and instances it refers to orinstances that refer to it, and/or are owned by the offeree.
  Relationship *Coding `json:"relationship,omitempty"`

  // Differentiates the kind of the asset .
  Scope *CodeableConcept `json:"scope,omitempty"`

  // Security labels that protects the asset.
  SecurityLabelNumber []float64 `json:"securityLabelNumber,omitempty"`

  // May be a subtype or part of an offered asset.
  Subtype []*CodeableConcept `json:"subtype,omitempty"`

  // Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.
  Text string `json:"text,omitempty"`

  // Target entity type about which the term may be concerned.
  Type []*CodeableConcept `json:"type,omitempty"`

  // Associated entities.
  TypeReference []*Reference `json:"typeReference,omitempty"`

  // Time period of asset use.
  UsePeriod []*Period `json:"usePeriod,omitempty"`

  // Contract Valued Item List.
  ValuedItem []*ContractValuedItem `json:"valuedItem,omitempty"`
}

func (strct *ContractAsset) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "answer" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"answer\": ")
	if tmp, err := json.Marshal(strct.Answer); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "condition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"condition\": ")
	if tmp, err := json.Marshal(strct.Condition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "context" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"context\": ")
	if tmp, err := json.Marshal(strct.Context); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "linkId" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"linkId\": ")
	if tmp, err := json.Marshal(strct.LinkId); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "period" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"period\": ")
	if tmp, err := json.Marshal(strct.Period); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "periodType" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"periodType\": ")
	if tmp, err := json.Marshal(strct.PeriodType); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "relationship" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"relationship\": ")
	if tmp, err := json.Marshal(strct.Relationship); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "scope" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"scope\": ")
	if tmp, err := json.Marshal(strct.Scope); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "securityLabelNumber" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"securityLabelNumber\": ")
	if tmp, err := json.Marshal(strct.SecurityLabelNumber); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "subtype" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"subtype\": ")
	if tmp, err := json.Marshal(strct.Subtype); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "text" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"text\": ")
	if tmp, err := json.Marshal(strct.Text); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "typeReference" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"typeReference\": ")
	if tmp, err := json.Marshal(strct.TypeReference); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "usePeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"usePeriod\": ")
	if tmp, err := json.Marshal(strct.UsePeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "valuedItem" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"valuedItem\": ")
	if tmp, err := json.Marshal(strct.ValuedItem); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *ContractAsset) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "answer":
            if err := json.Unmarshal([]byte(v), &strct.Answer); err != nil {
                return err
             }
        case "condition":
            if err := json.Unmarshal([]byte(v), &strct.Condition); err != nil {
                return err
             }
        case "context":
            if err := json.Unmarshal([]byte(v), &strct.Context); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "linkId":
            if err := json.Unmarshal([]byte(v), &strct.LinkId); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "period":
            if err := json.Unmarshal([]byte(v), &strct.Period); err != nil {
                return err
             }
        case "periodType":
            if err := json.Unmarshal([]byte(v), &strct.PeriodType); err != nil {
                return err
             }
        case "relationship":
            if err := json.Unmarshal([]byte(v), &strct.Relationship); err != nil {
                return err
             }
        case "scope":
            if err := json.Unmarshal([]byte(v), &strct.Scope); err != nil {
                return err
             }
        case "securityLabelNumber":
            if err := json.Unmarshal([]byte(v), &strct.SecurityLabelNumber); err != nil {
                return err
             }
        case "subtype":
            if err := json.Unmarshal([]byte(v), &strct.Subtype); err != nil {
                return err
             }
        case "text":
            if err := json.Unmarshal([]byte(v), &strct.Text); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        case "typeReference":
            if err := json.Unmarshal([]byte(v), &strct.TypeReference); err != nil {
                return err
             }
        case "usePeriod":
            if err := json.Unmarshal([]byte(v), &strct.UsePeriod); err != nil {
                return err
             }
        case "valuedItem":
            if err := json.Unmarshal([]byte(v), &strct.ValuedItem); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
