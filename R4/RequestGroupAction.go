// Code generated by schema-generate. DO NOT EDIT.

package R4

import (
    "bytes"
    "encoding/json"
    "fmt"
)

// RequestGroupAction A group of related requests that can be used to capture intended activities that have inter-dependencies such as "give this medication after that one".
type RequestGroupAction struct {

  // Sub actions.
  Action []*RequestGroupAction `json:"action,omitempty"`

  // Defines whether the action can be selected multiple times.
  CardinalityBehavior string `json:"cardinalityBehavior,omitempty"`

  // A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.
  Code []*CodeableConcept `json:"code,omitempty"`

  // An expression that describes applicability criteria, or start/stop conditions for the action.
  Condition []*RequestGroupCondition `json:"condition,omitempty"`

  // A short description of the action used to provide a summary to display to the user.
  Description string `json:"description,omitempty"`

  // Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
  Documentation []*RelatedArtifact `json:"documentation,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
  Extension []*Extension `json:"extension,omitempty"`

  // Defines the grouping behavior for the action and its children.
  GroupingBehavior string `json:"groupingBehavior,omitempty"`

  // Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
  Id string `json:"id,omitempty"`

  // May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
  // 
  // Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
  ModifierExtension []*Extension `json:"modifierExtension,omitempty"`

  // The participant that should perform or be responsible for this action.
  Participant []*Reference `json:"participant,omitempty"`

  // Defines whether the action should usually be preselected.
  PrecheckBehavior string `json:"precheckBehavior,omitempty"`

  // A user-visible prefix for the action.
  Prefix string `json:"prefix,omitempty"`

  // Indicates how quickly the action should be addressed with respect to other actions.
  Priority string `json:"priority,omitempty"`

  // A relationship to another action such as "before" or "30-60 minutes after start of".
  RelatedAction []*RequestGroupRelatedAction `json:"relatedAction,omitempty"`

  // Defines expectations around whether an action is required.
  RequiredBehavior string `json:"requiredBehavior,omitempty"`

  // The resource that is the target of the action (e.g. CommunicationRequest).
  Resource *Reference `json:"resource,omitempty"`

  // Defines the selection behavior for the action and its children.
  SelectionBehavior string `json:"selectionBehavior,omitempty"`

  // A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
  TextEquivalent string `json:"textEquivalent,omitempty"`

  // An optional value describing when the action should be performed.
  TimingAge *Age `json:"timingAge,omitempty"`

  // An optional value describing when the action should be performed.
  TimingDateTime string `json:"timingDateTime,omitempty"`

  // An optional value describing when the action should be performed.
  TimingDuration *Duration `json:"timingDuration,omitempty"`

  // An optional value describing when the action should be performed.
  TimingPeriod *Period `json:"timingPeriod,omitempty"`

  // An optional value describing when the action should be performed.
  TimingRange *Range `json:"timingRange,omitempty"`

  // An optional value describing when the action should be performed.
  TimingTiming *Timing `json:"timingTiming,omitempty"`

  // The title of the action displayed to a user.
  Title string `json:"title,omitempty"`

  // The type of action to perform (create, update, remove).
  Type *CodeableConcept `json:"type,omitempty"`
}

func (strct *RequestGroupAction) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBuffer(make([]byte, 0))
	buf.WriteString("{")
    comma := false
    // Marshal the "action" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"action\": ")
	if tmp, err := json.Marshal(strct.Action); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "cardinalityBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"cardinalityBehavior\": ")
	if tmp, err := json.Marshal(strct.CardinalityBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "code" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"code\": ")
	if tmp, err := json.Marshal(strct.Code); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "condition" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"condition\": ")
	if tmp, err := json.Marshal(strct.Condition); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "description" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"description\": ")
	if tmp, err := json.Marshal(strct.Description); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "documentation" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"documentation\": ")
	if tmp, err := json.Marshal(strct.Documentation); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "extension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"extension\": ")
	if tmp, err := json.Marshal(strct.Extension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "groupingBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"groupingBehavior\": ")
	if tmp, err := json.Marshal(strct.GroupingBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "id" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"id\": ")
	if tmp, err := json.Marshal(strct.Id); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "modifierExtension" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"modifierExtension\": ")
	if tmp, err := json.Marshal(strct.ModifierExtension); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "participant" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"participant\": ")
	if tmp, err := json.Marshal(strct.Participant); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "precheckBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"precheckBehavior\": ")
	if tmp, err := json.Marshal(strct.PrecheckBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "prefix" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"prefix\": ")
	if tmp, err := json.Marshal(strct.Prefix); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "priority" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"priority\": ")
	if tmp, err := json.Marshal(strct.Priority); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "relatedAction" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"relatedAction\": ")
	if tmp, err := json.Marshal(strct.RelatedAction); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "requiredBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"requiredBehavior\": ")
	if tmp, err := json.Marshal(strct.RequiredBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "resource" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"resource\": ")
	if tmp, err := json.Marshal(strct.Resource); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "selectionBehavior" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"selectionBehavior\": ")
	if tmp, err := json.Marshal(strct.SelectionBehavior); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "textEquivalent" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"textEquivalent\": ")
	if tmp, err := json.Marshal(strct.TextEquivalent); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingAge" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingAge\": ")
	if tmp, err := json.Marshal(strct.TimingAge); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDateTime" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDateTime\": ")
	if tmp, err := json.Marshal(strct.TimingDateTime); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingDuration" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingDuration\": ")
	if tmp, err := json.Marshal(strct.TimingDuration); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingPeriod" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingPeriod\": ")
	if tmp, err := json.Marshal(strct.TimingPeriod); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingRange" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingRange\": ")
	if tmp, err := json.Marshal(strct.TimingRange); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "timingTiming" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"timingTiming\": ")
	if tmp, err := json.Marshal(strct.TimingTiming); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "title" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"title\": ")
	if tmp, err := json.Marshal(strct.Title); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true
    // Marshal the "type" field
    if comma { 
        buf.WriteString(",") 
    }
    buf.WriteString("\"type\": ")
	if tmp, err := json.Marshal(strct.Type); err != nil {
		return nil, err
 	} else {
 		buf.Write(tmp)
	}
	comma = true

	buf.WriteString("}")
	rv := buf.Bytes()
	return rv, nil
}

func (strct *RequestGroupAction) UnmarshalJSON(b []byte) error {
    var jsonMap map[string]json.RawMessage
    if err := json.Unmarshal(b, &jsonMap); err != nil {
        return err
    }
    // parse all the defined properties
    for k, v := range jsonMap {
        switch k {
        case "action":
            if err := json.Unmarshal([]byte(v), &strct.Action); err != nil {
                return err
             }
        case "cardinalityBehavior":
            if err := json.Unmarshal([]byte(v), &strct.CardinalityBehavior); err != nil {
                return err
             }
        case "code":
            if err := json.Unmarshal([]byte(v), &strct.Code); err != nil {
                return err
             }
        case "condition":
            if err := json.Unmarshal([]byte(v), &strct.Condition); err != nil {
                return err
             }
        case "description":
            if err := json.Unmarshal([]byte(v), &strct.Description); err != nil {
                return err
             }
        case "documentation":
            if err := json.Unmarshal([]byte(v), &strct.Documentation); err != nil {
                return err
             }
        case "extension":
            if err := json.Unmarshal([]byte(v), &strct.Extension); err != nil {
                return err
             }
        case "groupingBehavior":
            if err := json.Unmarshal([]byte(v), &strct.GroupingBehavior); err != nil {
                return err
             }
        case "id":
            if err := json.Unmarshal([]byte(v), &strct.Id); err != nil {
                return err
             }
        case "modifierExtension":
            if err := json.Unmarshal([]byte(v), &strct.ModifierExtension); err != nil {
                return err
             }
        case "participant":
            if err := json.Unmarshal([]byte(v), &strct.Participant); err != nil {
                return err
             }
        case "precheckBehavior":
            if err := json.Unmarshal([]byte(v), &strct.PrecheckBehavior); err != nil {
                return err
             }
        case "prefix":
            if err := json.Unmarshal([]byte(v), &strct.Prefix); err != nil {
                return err
             }
        case "priority":
            if err := json.Unmarshal([]byte(v), &strct.Priority); err != nil {
                return err
             }
        case "relatedAction":
            if err := json.Unmarshal([]byte(v), &strct.RelatedAction); err != nil {
                return err
             }
        case "requiredBehavior":
            if err := json.Unmarshal([]byte(v), &strct.RequiredBehavior); err != nil {
                return err
             }
        case "resource":
            if err := json.Unmarshal([]byte(v), &strct.Resource); err != nil {
                return err
             }
        case "selectionBehavior":
            if err := json.Unmarshal([]byte(v), &strct.SelectionBehavior); err != nil {
                return err
             }
        case "textEquivalent":
            if err := json.Unmarshal([]byte(v), &strct.TextEquivalent); err != nil {
                return err
             }
        case "timingAge":
            if err := json.Unmarshal([]byte(v), &strct.TimingAge); err != nil {
                return err
             }
        case "timingDateTime":
            if err := json.Unmarshal([]byte(v), &strct.TimingDateTime); err != nil {
                return err
             }
        case "timingDuration":
            if err := json.Unmarshal([]byte(v), &strct.TimingDuration); err != nil {
                return err
             }
        case "timingPeriod":
            if err := json.Unmarshal([]byte(v), &strct.TimingPeriod); err != nil {
                return err
             }
        case "timingRange":
            if err := json.Unmarshal([]byte(v), &strct.TimingRange); err != nil {
                return err
             }
        case "timingTiming":
            if err := json.Unmarshal([]byte(v), &strct.TimingTiming); err != nil {
                return err
             }
        case "title":
            if err := json.Unmarshal([]byte(v), &strct.Title); err != nil {
                return err
             }
        case "type":
            if err := json.Unmarshal([]byte(v), &strct.Type); err != nil {
                return err
             }
        default:
            return fmt.Errorf("additional property not allowed: \"" + k + "\"")
        }
    }
    return nil
}
